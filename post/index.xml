<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Budi Ariyanto</title>
    <link>https://budiariyanto.github.io/post/index.xml</link>
    <description>Recent content in Posts on Budi Ariyanto</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Budi Ariyanto</copyright>
    <lastBuildDate>Mon, 01 May 2017 20:40:28 +0700</lastBuildDate>
    <atom:link href="https://budiariyanto.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Memaknai Hari Ulang Tahun</title>
      <link>https://budiariyanto.github.io/2017/05/01/birthday/</link>
      <pubDate>Mon, 01 May 2017 20:40:28 +0700</pubDate>
      
      <guid>https://budiariyanto.github.io/2017/05/01/birthday/</guid>
      <description>&lt;p&gt;Hari ulang tahun umumnya ditandai dengan perayaan bersama orang terdekat kita.
Perayaan ini sebagai simbol kebahagiaan yang kita bagikan kepada orang lain.
Kerap kali orang memaknai hari ulang tahun hanya sampai di situ saja. Menurut saya,
ulang tahun mempunyai dua buah perspektif dan dapat menjadi bahan refleksi diri.
Perspektif yang pertama adalah umur kita bertambah satu dan perspektif yang
kedua adalah umur kita berkurang satu.&lt;/p&gt;

&lt;p&gt;Ketika kita memaknai ulang tahun sebagai umur kita bertambah satu, maka kita akan
mengingat pencapaian yang sudah kita lakukan dan pengalaman hidup seperti apa yang
sudah kita lalui, juga tentunya kita ingat mengucap syukur kepada Tuhan karena
diberi kesempatan untuk memulai tahun yang baru di hidup kita. Karena kita sudah
diberi kesempatan, maka seharusnyalah kehidupan kita menjadi lebih baik dari
waktu sekarang dan masa lalu dengan membuat perencanaan dan komitmen yang baik.
Sebaliknya, jika kita memaknai ulang tahun sebagai umur kita berkurang satu, maka
kita akan ingat mimpi kita yang belum tercapai, kesalahan-kesalahan yang pernah
kita perbuat dan belum sempat kita perbaiki, sifat-sifat kita yang buruk dan
sebagainya. Hal-hal tersebut dapat menjadi bahan refleksi untuk memperbaiki
diri.&lt;/p&gt;

&lt;p&gt;Perpaduan dari kedua perspektif ini menjadikan hati kita melihat ke masa lalu,
sekarang dan masa depan. Ulang tahun beserta dengan perayaan hanya merupakan suatu tradisi
dari masa ke masa. Hadiah ulang tahun sifatnya hanya membantu orang yang
berulang tahun tetap bersemangat menjalani tahun kehidupannya yang baru. Dari
kesemuanya itu yang terpenting adalah hati kita dan bagaimana cara kita
memaknainya. Jadikan hati kita bahagia tanpa pesta dan hadiah. Tularkan semangat
hidup kita walaupun umur berkurang satu. Tetap berjuang meskipun umur sudah
bertambah satu!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fix Docker Networking Problem</title>
      <link>https://budiariyanto.github.io/2017/03/22/docker-networking/</link>
      <pubDate>Wed, 22 Mar 2017 10:56:18 +0700</pubDate>
      
      <guid>https://budiariyanto.github.io/2017/03/22/docker-networking/</guid>
      <description>&lt;p&gt;We may met situations that docker cannot connect to the internet. And the error message look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Step 1/3 : FROM docker/whalesay:latest
 ---&amp;gt; 6b362a9f73eb
Step 2/3 : RUN apt-get -y update &amp;amp;&amp;amp; apt-get install -y fortunes
 ---&amp;gt; Running in 10c0ca4a809a
Err http://archive.ubuntu.com trusty InRelease
  
Err http://archive.ubuntu.com trusty-updates InRelease
  
Err http://archive.ubuntu.com trusty-security InRelease
  
Err http://archive.ubuntu.com trusty Release.gpg
  Could not resolve &#39;archive.ubuntu.com&#39;
Err http://archive.ubuntu.com trusty-updates Release.gpg
  Could not resolve &#39;archive.ubuntu.com&#39;
Err http://archive.ubuntu.com trusty-security Release.gpg
  Could not resolve &#39;archive.ubuntu.com&#39;
Reading package lists...
W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/trusty/InRelease  

W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/trusty-updates/InRelease  

W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/trusty-security/InRelease  

W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/trusty/Release.gpg  Could not resolve &#39;archive.ubuntu.com&#39;

W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/trusty-updates/Release.gpg  Could not resolve &#39;archive.ubuntu.com&#39;

W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/trusty-security/Release.gpg  Could not resolve &#39;archive.ubuntu.com&#39;

W: Some index files failed to download. They have been ignored, or old ones used instead.
....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This because docker network not properly set up yet. To set network on docker, we can do this:&lt;/p&gt;

&lt;p&gt;Find primary and secondary dns server using this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nmcli dev show | grep &#39;IP4.DNS&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create file &lt;code&gt;/etc/docker/daemon.json&lt;/code&gt; and add:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;dns&amp;quot;: [&amp;quot;10.0.0.2&amp;quot;, &amp;quot;10.0.0.3&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you can change dns using google dns &lt;code&gt;8.8.8.8&lt;/code&gt; and &lt;code&gt;8.8.4.4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, restart docker: &lt;code&gt;sudo service docker restart&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bulk Renaming in Linux</title>
      <link>https://budiariyanto.github.io/2017/03/12/linux_bulk_renaming/</link>
      <pubDate>Sun, 12 Mar 2017 17:59:06 +0700</pubDate>
      
      <guid>https://budiariyanto.github.io/2017/03/12/linux_bulk_renaming/</guid>
      <description>

&lt;p&gt;There is a handy tools in linux for renaming bulk/mass files a once called
rename. It&amp;rsquo;s a perl script and included in most linux distros.&lt;/p&gt;

&lt;h2 id=&#34;how-to-bulk-rename-files&#34;&gt;How to bulk rename files&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rename &#39;s/&amp;lt;files to rename regex pattern&amp;gt;/&amp;lt;expected regex pattern&amp;gt;/&#39; &amp;lt;destination files&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-to-bulk-rename-files-add-prefix&#34;&gt;How to bulk rename files, add prefix&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rename &#39;s/^/&amp;lt;expected regex pattern&amp;gt;/&#39; &amp;lt;destination files&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Instalasi Golang</title>
      <link>https://budiariyanto.github.io/2016/10/01/instalasi-golang/</link>
      <pubDate>Sat, 01 Oct 2016 21:11:36 +0700</pubDate>
      
      <guid>https://budiariyanto.github.io/2016/10/01/instalasi-golang/</guid>
      <description>

&lt;p&gt;Bahasa pemrograman saat ini berkembang begitu cepat. Banyak bahasa pemrograman baru bermunculan dan beragam. Bahasa pemrograman baru yang sempat saya coba adalah go atau biasa disebut golang(go language) yang dikembangkan oleh Google. Golang dirilis pada tahun 2009, dan saat artikel ini ditulis sudah mencapai versi 1.7.1.&lt;/p&gt;

&lt;h2 id=&#34;download-golang&#34;&gt;Download Golang&lt;/h2&gt;

&lt;p&gt;Kita bisa mendownload golang di &lt;a href=&#34;https://golang.org/dl/&#34;&gt;sini&lt;/a&gt;. Downloadlah yg cocok dengan OS kita.&lt;/p&gt;

&lt;h2 id=&#34;setup-environment-variable&#34;&gt;Setup Environment Variable&lt;/h2&gt;

&lt;p&gt;Setelah kita download, extractlah di sembarang folder. Sebelum bisa ngoding menggunakan tools di golang, kita harus setup 2 hal, yaitu environment variabel &lt;code&gt;GOROOT&lt;/code&gt; dan &lt;code&gt;GOPATH&lt;/code&gt;. &lt;code&gt;GOROOT&lt;/code&gt; kita set menuju path dimana golang diextract. &lt;code&gt;GOPATH&lt;/code&gt; kita set terserah di folder mana, yang penting tidak menjadi satu di dalam &lt;code&gt;GOROOT&lt;/code&gt; supaya kalau kita upgrade golang nya akan mudah, tinggal hapus dan extract ulang. Tidak usah menyelamatkan folder &lt;code&gt;GOPATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tambahkan environment variabel &lt;code&gt;GOROOT/bin&lt;/code&gt; dan &lt;code&gt;GOPATH/bin&lt;/code&gt;  pada variabel &lt;code&gt;PATH&lt;/code&gt; di dalam &lt;code&gt;/etc/profile.d/go.sh&lt;/code&gt; supaya binary dari project yang kita buat maupun binary dependency dari github/tempat lain bisa ditemukan oleh OS menggunakan script di bawah ini:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export GOROOT=/data/development/go
export GOPATH=/data/development/gopkg

export PATH=$PATH:$GOROOT/bin
export PATH=$PATH:$GOPATH/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setelah selesai setup environment variable, logout dan login ulang atau restart komputer kita.&lt;/p&gt;

&lt;h2 id=&#34;check-instalasi-golang&#34;&gt;Check Instalasi Golang&lt;/h2&gt;

&lt;p&gt;Untuk mengecek apakah instalasi golang kita sudah benar atau belum, ketik &lt;code&gt;go&lt;/code&gt; di terminal. Seharusnya akan muncul output seperti ini:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Go is a tool for managing Go source code.

    Usage:

        go command [arguments]

    The commands are:

        build       compile packages and dependencies
        clean       remove object files
        doc         show documentation for package or symbol
        env         print Go environment information
        fix         run go tool fix on packages
        fmt         run gofmt on package sources
        generate    generate Go files by processing source
        get         download and install packages and dependencies
        install     compile and install packages and dependencies
        list        list packages
        run         compile and run Go program
        test        test packages
        tool        run specified go tool
        version     print Go version
        vet         run go tool vet on packages

    Use &amp;quot;go help [command]&amp;quot; for more information about a command.

    Additional help topics:

        c           calling between Go and C
        buildmode   description of build modes
        filetype    file types
        gopath      GOPATH environment variable
        environment environment variables
        importpath  import path syntax
        packages    description of package lists
        testflag    description of testing flags
        testfunc    description of testing functions

    Use &amp;quot;go help [topic]&amp;quot; for more information about that topic.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jika instalasi sudah benar, maka kita sudah siap ngoding.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Membuat Project Java Dengan Gradle</title>
      <link>https://budiariyanto.github.io/2014/06/16/membuat-project-java-dengan-gradle/</link>
      <pubDate>Mon, 16 Jun 2014 03:29:56 +0700</pubDate>
      
      <guid>https://budiariyanto.github.io/2014/06/16/membuat-project-java-dengan-gradle/</guid>
      <description>&lt;p&gt;Build tools adalah sebuah tools atau alat untuk mengcompile suatu project berisi source code yang kita buat. Build tools banyak macamnya dan sudah ada sejak lama.&lt;/p&gt;

&lt;h2 id=&#34;kenapa-kita-butuh-build-tools&#34;&gt;Kenapa Kita Butuh Build Tools&lt;/h2&gt;

&lt;p&gt;Setelah kita selesai ngoding, tentunya kita compile aplikasi kita. Nah proses peng&lt;strong&gt;compile&lt;/strong&gt;an biasanya mencakup banyak hal, misalnya yang paling mendasar adalah mengubah source code menjadi binary. Proses ini kadang menjadi rumit ketika code yang kita buat menggunakan satu atau lebih library eksternal. Project kita menjadi dependen(bergantung) kepada library yang kita gunakan. Ternyata library yang kita gunakan pun dependen terhadap library lainnya lagi. Semuanya ini kalau kita selesaikan satu per satu secara manual bisa membuat pusing kepala.&lt;/p&gt;

&lt;p&gt;Masalah lainnya lagi adalah ketika packaging. Packaging project adalah aktivitas kita sebelum mendistribusikan project kita. Dalam kegiatan packaging ini, kita seleksi file-file mana saja yang harus diikutsertakan, bagaimana layoutnya, apa tipe packagenya dan sebagainya. Nah build tools ini mempunyai kemampuan untuk membantu kita dalam mengerjakan hal ini. Cukup sekali melakukan konfigurasi saja, selanjutnya biar build tools yang melakukannya. Jadi intinya adalah build tools ini membantu mengotomatisasi pekerjaan kita dalam hal distribusi dan build project. Pertanyaannya, apa build tools yang bagus untuk project Java? Menurut saya ada 2 yaitu &lt;a href=&#34;http://maven.apache.org&#34;&gt;Maven&lt;/a&gt; dan &lt;a href=&#34;http://www.gradle.org&#34;&gt;Gradle&lt;/a&gt;. Maven sebelumnya sudah pernah saya bahas secara singkat di &lt;a href=&#34;https://budiariyanto.github.io/2014/01/17/tutorial-singkat-maven/&#34;&gt;sini&lt;/a&gt; dan di &lt;a href=&#34;https://budiariyanto.github.io/2014/05/19/maven-multi-module-project/&#34;&gt;sini&lt;/a&gt;. Sekarang saya akan membahas Gradle.&lt;/p&gt;

&lt;h2 id=&#34;gradle&#34;&gt;Gradle&lt;/h2&gt;

&lt;p&gt;Gradle adalah build tools modern yang sedang booming akhir-akhir ini, terutama di kalangan penggemar bahasa pemrograman Java. Gradle ini mirip seperti build tools lain, contohnya make atau rake. Konfigurasi build automation pada gradle menggunakan bahasa pemrograman Groovy. Pada artikel ini saya tidak membahas tentang bahasa pemrograman Groovy, tapi saya ambil yang penting-pentingnya saja supaya kita dapat membuat project Java menggunakan Gradle diintegrasikan dengan Maven. Wah kenapa Maven masih ikut-ikut?&lt;/p&gt;

&lt;p&gt;Jadi begini, kegunaan Gradle sedikit berbeda dengan Maven. Gradle adalah build tools yang tidak spesifik terhadap satu bahasa pemrograman tertentu, sedangkan Maven spesifik untuk membantu membuat project yang kita buat menggunakan Java. Kalau kita perhatikan di ebook-ebook Gradle yang ada, pasti tutorial yang ada di dalam buku tersebut malah membahas bagaimana membuat project dan task Gradle secara umum menggunakan bahasa pemrograman Groovy, bukan langsung membahas bagaimana membuat project Java dengan menggunakan Gradle. Nah nanti kita akan membahas bagaimana membuat task dan mengatur project yang kita buat menggunakan Gradle, tapi masih menggunakan maven untuk memanage dependency project yang ada.&lt;/p&gt;

&lt;p&gt;Jadi, Gradle bisa digunakan untuk project apa saja karena kita bisa membuat task sendiri di dalamnya dimana task tersebut kita sendiri yang membuatnya mau jadi bagaimana. Itulah sekilas tentang Gradle.&lt;/p&gt;

&lt;h2 id=&#34;menginstall-gradle&#34;&gt;Menginstall Gradle&lt;/h2&gt;

&lt;p&gt;Berikut ini langkah-langkah setup gradle di komputer kita:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download gradle di websitenya lalu ekstrak di direktori mana saja.&lt;/li&gt;
&lt;li&gt;Buat environment variable bernama &lt;code&gt;GRADLE_HOME&lt;/code&gt; dan isi valuenya dengan path menuju direktori gradle yang diekstrak tadi.&lt;/li&gt;
&lt;li&gt;Logout dari sistem, login lagi. Selesai. :)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;java-project-layout&#34;&gt;Java Project Layout&lt;/h2&gt;

&lt;p&gt;Project layout sebetulnya terserah kita mau bagaimana. Tapi java punya konvensi terhadap project layout ini. Project layout yang saya gunakan biasanya ada 3 yaitu untuk project java, java web dan java enterprise. Untuk mendukung contoh penggunaan Gradle pada pembahasan artikel ini, saya akan memilih menggunakan project layout java. Layoutnya seperti ini:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; +-projectRootDir
  +-src
   +-main
   | +-java
   | +-resources
   +-test
    +-java
    +-resources
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Layout di atas adalah layout untuk project tunggal. Nanti kita akan buat menjadi layout multi project menggunakan Gradle. Multi project pengertiannya adalah ada satu atau banyak project di dalam satu project. Kenapa harus multi project? Karena menurut saya project akan lebih jelas peranannya karena lebih modular dan lebih gampang memaintainnya.&lt;/p&gt;

&lt;h2 id=&#34;gradle-project-dan-task&#34;&gt;Gradle Project dan Task&lt;/h2&gt;

&lt;p&gt;Untuk membuat project Gradle, cukup buat direktori biasa. Misalkan direktorinya kita beri nama &lt;code&gt;coba_gradle&lt;/code&gt;. Direktori ini nantinya akan berlaku sebagai root project. Untuk membuatnya menjadi root project Gradle, di dalam direktori &lt;code&gt;coba_gradle&lt;/code&gt; kita &lt;strong&gt;harus&lt;/strong&gt; membuat file bernama &lt;code&gt;build.gradle&lt;/code&gt;. Sudah, cukup itu saja. :)&lt;/p&gt;

&lt;p&gt;Gradle task adalah task yang kita coding sendiri menggunakan bahasa pemrograman Groovy. Karena kita akan membuat project java kita akan menggunakan &lt;strong&gt;plugin&lt;/strong&gt; java pada Gradle. Apa peran atau fungsi plugin? Plugin pada Gradle adalah untuk meringankan kita dalam membuat task. Jika kita menggunakan plugin maka kita tidak perlu membuat task lagi.&lt;/p&gt;

&lt;p&gt;Selanjutnya kita akan bahas isi dari file &lt;code&gt;build.gradle&lt;/code&gt; ini yang merupakan konfigurasi dari root project yang kita buat. Saya beri contoh isi filenya:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;// Dengan apply java plugin, kita dibuatkan task-task untuk membuild program java kita
// Untuk mengeceknya, kita bisa jalankan perintah: gradle tasks
// nanti akan tampil task-task apa saja yang available. Bandingkan daftar tasknya ketika kita belum apply plugin java
apply plugin: &#39;java&#39;

// Ini adalah project properties. Saya menggunakannya untuk listing masing-masing versi dari dependency yang digunakan
// Project properties ini digunakan ketika mendeklarasikan dependency
project.ext {
    JUNIT_VERSION = &#39;4.11&#39;
    SPRING_CORE_VERSION = &#39;4.0.5.RELEASE&#39;
}

// Konfigurasi untuk semua project
allprojects {
    // Konfigurasi repository maven
    // Kita menggunakan 2 repository. Local dan maven central
    repositories {
        // Konfigurasi repository lokal maven. Kita arahkan ke komputer lokal di direktori
        // /home/budi/.m2/repository
        // Bisa juga diarahkan ke local repository server seperti nexus atau artifactory
        maven {
            url &amp;quot;file://home/budi/.m2/repository&amp;quot;
        }

        // Special Gradle notation yang berguna untuk memberitahu Gradle bahwa kita menggunakan repository maven central
        mavenCentral() 
    }    
}

// Konfigurasi untuk tiap subproject
// Nantinya ketika kita membuat subproject, konfigurasi ini akan diwariskan ke subproject tersebut
subprojects {
    apply plugin: &#39;java&#39;

    // Supaya kita tidak usah repot membuat maven task.
    apply plugin: &#39;maven&#39;
                
    // Konfigurasi maven plugin supaya mengupload artifact ke path yang kita inginkan
    uploadArchives {
        repositories {
            mavenDeployer {
                // Path kita set ke direktori komputer lokal /home/budi/.m2/repository
                repository(url: &amp;quot;file://home/budi/.m2/repository/&amp;quot;)
            }
        }
    }
    
    // Deklarasi dependency untuk setiap subproject
    dependencies {
        // Syntaxnya adalah &amp;lt;scope&amp;gt; &amp;quot;&amp;lt;groupId&amp;gt;:&amp;lt;artifactId&amp;gt;:&amp;lt;version&amp;gt;&amp;quot;
        // Scope ada 4, yaitu compile, runtime, testCompile, testRuntime
        // compile: dependency diperlukan saat compile ataupun development
        // runtime: dependency diperlukan saat runtime
        // testCompile: dependency diperlukan saat ngetes-ngetes program
        // testRuntime: dependency diperlukan saat program yang untuk ngetes-ngetes berjalan
        
        // Sebagai contoh, kita menggunakan 2 library. JUnit dan spring-context
        // Bisa kita lihat pada deklarasi version menggunakan variable dari project properties
        testCompile &amp;quot;junit:junit:${project.JUNIT_VERSION}&amp;quot;
        compile &amp;quot;org.springframework:spring-context:${project.SPRING_CORE_VERSION}&amp;quot;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;membuat-subproject&#34;&gt;Membuat Subproject&lt;/h2&gt;

&lt;p&gt;Root project sudah dibuat. Saatnya kita membuat subproject. Untuk membuatnya sangat gampang. Cukup membuat direktori baru di dalam direktori root project. Misalkan kita buat namanya &lt;code&gt;coba_gradle_subproject&lt;/code&gt;. Di dalam direktori ini, kita buat layout project java yang sudah dibahas sebelumnya. Jangan lupa kita juga wajib membuat file &lt;code&gt;build.gradle&lt;/code&gt; di dalam direktori &lt;code&gt;coba_gradle_subproject&lt;/code&gt; ini. Sebagai contoh, isinya hanya seperti ini:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;version = &#39;1.0.0.SNAPSHOT&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Walaupun isinya hanya seperti itu, namun karena root project sudah mendefinisikan konfigurasi pada block &lt;code&gt;subprojects&lt;/code&gt;, maka otomatis subproject ini mewarisi apa yang sudah dideklarasikan di sana, dari plugin dan dependencynya. Variabel version ini perlu kita deklarasikan supaya nanti ketika subproject ini kita compile menjadi bentuk jar misalnya, filenamenya akan ditambahkan version dari project ini. Jadi misalkan versionnya kita set &lt;code&gt;1.0.0.SNAPSHOT&lt;/code&gt;, maka file yang tercipta nantinya akan bernama &lt;code&gt;coba_gradle_subproject-1.0.0.SNAPSHOT.jar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pada file ini, kita juga bisa mendeklarasikan lagi konfigurasi yang sama dengan yang sudah ada di root project atau yang lain. Nantinya Gradle pertama kali akan membaca &lt;code&gt;build.gradle&lt;/code&gt; dari direktori subproject, lalu membaca lagi &lt;code&gt;build.gradle&lt;/code&gt; dari direktori root project dan mengakumulasikannya.&lt;/p&gt;

&lt;p&gt;Nah, subproject sudah dibuat. Bagaimana caranya supaya root project mengenali subproject ini? Mari kita kembali lagi ke direktori &lt;code&gt;coba_gradle&lt;/code&gt;. Dalam direktori tersebut, buatlah file bernama &lt;code&gt;settings.gradle&lt;/code&gt; dan deklarasikan subprojectnya di dalam file tersebut seperti berikut:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;include &#39;coba_gradle_subproject&#39;

// tambahkan subproject lain jika ada
// include &#39;subproject2&#39;
// include &#39;subproject3&#39;
// dst...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gambaran akhir dari struktur direktorinya adalah sebagai berikut:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; +-coba_gradle
   +-coba_gradle_subproject
   |  +-src
   |  |  +-main
   |  |  | +-java
   |  |  | +-resources
   |  |  +-test
   |  |    +-java
   |  +-build.gradle
   +-build.gradle
   +-settings.gradle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setup project sudah selesai :). Kekurangan dari Gradle ini adalah belum mempunyai archetype generator seperti maven. Jadi setiap kali kita membuat subproject, kita membuat layout direktori secara manual. Ke depannya Gradle diharapkan mempunyai fitur seperti maven archetype.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Menjadi Idealis</title>
      <link>https://budiariyanto.github.io/2014/05/19/menjadi-idealis/</link>
      <pubDate>Mon, 19 May 2014 17:56:45 +0700</pubDate>
      
      <guid>https://budiariyanto.github.io/2014/05/19/menjadi-idealis/</guid>
      <description>&lt;p&gt;&amp;ldquo;Udah laaahh.. nggak usah idealis gituu&amp;hellip;&amp;rdquo;. Kalimat ini sering saya dengar dari teman-teman saya. Biasanya, kalimat ini keluar kalau saya bercerita mengenai hal-hal yang ingin saya lakukan dan menurut saya benar, tapi kebanyakan orang tidak mau melakukannya. Contohnya, di tempat saya bekerja, terus terang masalah salary tidak menarik, tidak kompetitif. Sebagai programmer, saya sering kerja lembur karena deadline proyek yang singkat. Terkadang pekerjaan malah saya lanjutkan lagi di rumah. Tidak ada penghargaan untuk kerja lembur saya, berupa uang ataupun dalam bentuk lain. Jadi, lembur atau tidak take home pay saya sama saja. Meskipun begitu, saya tetap ingin proyek yang saya kerjakan selesai dengan baik dan tepat waktu. Karena hal ini, saya dibilang idealis oleh beberapa teman saya. Entah kenapa, orang idealis itu kesannya negatif.&lt;/p&gt;

&lt;h2 id=&#34;apa-sih-idealis-dan-idealisme-itu&#34;&gt;Apa sih idealis dan idealisme itu?&lt;/h2&gt;

&lt;p&gt;Menurut saya, idealisme adalah suatu paham atau pemikiran seseorang, yang menurutnya paling benar dan paling baik. Orang yang mempunyai idealisme dan ia pegang teguh, biasa disebut idealis. Biasanya, orang akan komplain atau bertanya-tanya. &amp;ldquo;Menurut dia itu baik dan benar, tapi menurut saya enggak tuh.. Gimana dong?&amp;rdquo; Oke, itulah kebenaran.
&lt;/p&gt;

&lt;h2 id=&#34;bagaimana-memahami-kebenaran&#34;&gt;Bagaimana memahami kebenaran?&lt;/h2&gt;

&lt;p&gt;Menurut saya, kebenaran ada 2 jenis. Kebenaran universal dan kebenaran menurut rasio manusia. Kebenaran universal adalah Tuhan. Semua orang yang ber-Tuhan setuju bahwa Tuhan sumber kebenaran dan memang benar-benar benar. Kebenaran menurut rasio manusia sangat beragam. Dilihat dulu situasi dan kondisinya. Di sini benar, di sana bisa jadi salah atau sebaliknya. Maka dari itu, manusia selalu mencari kebenaran. Dalam ilmu pengetahuan, ilmu pencarian kebenaran ini dikenal dengan filsafat.&lt;/p&gt;

&lt;h2 id=&#34;apakah-kita-perlu-mempunyai-idealisme&#34;&gt;Apakah kita perlu mempunyai idealisme?&lt;/h2&gt;

&lt;p&gt;Karena di dunia ini kebenaran menurut rasio manusia bermacam-macam, maka kita perlu mempunyai idealisme. Kita harus mempunyai patokan untuk diri sendiri, yang mana yang benar dan salah. Jika kita tidak punya idealisme, kita akan menjadi mudah terpengaruh oleh lingkungan di mana kita berada. Misalnya, jika orang-orang di lingkungan kita suka main judi, kita jadi ikut-ikutan main judi juga. Kita mengikuti apa yang benar menurut orang lain. Saya tidak bisa membayangkan apa yang akan terjadi dalam hidup saya, jika saya tidak punya idealisme.&lt;/p&gt;

&lt;h2 id=&#34;apakah-kita-perlu-menjadi-idealis&#34;&gt;Apakah kita perlu menjadi idealis?&lt;/h2&gt;

&lt;p&gt;Kalau kita sudah mempunyai idealisme dan dapat mempertahankan idealisme kita, berarti otomatis kita idealis dan itu wajar kok. Walaupun mempertahankan idealisme itu kadang agak terlihat ekstrim, tapi tetap memperhatikan situasi dan kondisi, tetap ada unsur keluwesan, bukan membabi buta. Misal jika saya sakit, saya tentu istirahat. Tidak memaksakan diri bekerja supaya proyek selesai tepat waktu. Jadi, jadilah idealis karena itu bukan sesuatu yang buruk. Carilah kebenaran, ikuti kebenaran yang Anda temukan untuk menjalani kehidupan di masa sekarang demi masa depan Anda.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Maven Multi Module Project</title>
      <link>https://budiariyanto.github.io/2014/05/19/maven-multi-module-project/</link>
      <pubDate>Mon, 19 May 2014 17:19:49 +0700</pubDate>
      
      <guid>https://budiariyanto.github.io/2014/05/19/maven-multi-module-project/</guid>
      <description>

&lt;p&gt;Dalam membuat satu project besar, sebaiknya kita bagi menjadi beberapa project kecil. Project kecil ini tujuannya untuk membagi project supaya strukturnya projectnya lebih mudah dipahami dan juga lebih modular. Maven mempunyai fitur untuk membantu merealisasikan hal ini, yaitu project inheritance dan project aggregation. Mari kita bahas satu per satu.&lt;/p&gt;

&lt;h2 id=&#34;briefing&#34;&gt;Briefing&lt;/h2&gt;

&lt;p&gt;Untuk membantu memahami dengan mudah, kita akan membuat sebuah project sederhana bernama &amp;ldquo;Manusia&amp;rdquo; dimana project ini punya modul yang bernama &amp;ldquo;Kepala&amp;rdquo;, &amp;ldquo;Badan&amp;rdquo;, &amp;ldquo;Tangan&amp;rdquo; dan &amp;ldquo;Kaki&amp;rdquo;. Modul-modul ini meng-inherit/mewarisi apa yang menjadi kepunyaan project &amp;ldquo;Manusia&amp;rdquo; dan sekaligus menjadi agregasinya, karena bisa dibayangkan bahwa manusia mempunyai kepala, badan, tangan dan kaki.&lt;/p&gt;

&lt;h2 id=&#34;parent-pom&#34;&gt;Parent POM&lt;/h2&gt;

&lt;p&gt;Buat parent POM di direktori terserah Anda. Pada tutorial ini akan saya buat pada direktori &lt;code&gt;/home/budi/project/manusia&lt;/code&gt;. Parent POM adalah POM milik project &amp;ldquo;Manusia&amp;rdquo;. Definisinya sebagai berikut:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
  xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;
  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

  &amp;lt;groupId&amp;gt;org.projects&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;manusia&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
  &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt;

  &amp;lt;name&amp;gt;manusia&amp;lt;/name&amp;gt;
  &amp;lt;url&amp;gt;http://manusia.projects.org&amp;lt;/url&amp;gt;

  &amp;lt;properties&amp;gt;
    &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
  &amp;lt;/properties&amp;gt;

  &amp;lt;dependencies&amp;gt;
	&amp;lt;dependency&amp;gt; 
	  &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt;
	  &amp;lt;artifactId&amp;gt;logback-classic&amp;lt;/artifactId&amp;gt;
	  &amp;lt;version&amp;gt;1.1.2&amp;lt;/version&amp;gt;
	&amp;lt;/dependency&amp;gt;
  	&amp;lt;dependency&amp;gt;
		&amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;1.7.7&amp;lt;/version&amp;gt;
	&amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;
      &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
  &amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Parent POM sebetulnya adalah POM biasa. Yang perlu diperhatikan adalah &lt;code&gt;packaging&lt;/code&gt;nya adalah &lt;strong&gt;pom&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;project-inheritance&#34;&gt;Project Inheritance&lt;/h2&gt;

&lt;p&gt;Setelah tadi sudah membuat parent POM maka sekarang kita akan membuat POM dari masing-masing modul yang diinherit dari parent POM. Kita akan membuat POM-nya pada direktori:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/home/budi/project/manusia/manusia-kepala&lt;/code&gt; untuk modul manusia-kepala&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home/budi/project/manusia/manusia-badan&lt;/code&gt; untuk modul manusia-badan&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home/budi/project/manusia/manusia-tangan&lt;/code&gt; untuk modul manusia-tangan&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home/budi/project/manusia/manusia-kaki&lt;/code&gt; untuk modul manusia-kaki&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Berikut ini contoh POMnya:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
	xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;
	&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;!-- Penting! Inherit dari parent POM --&amp;gt;
	&amp;lt;parent&amp;gt;
		&amp;lt;groupId&amp;gt;org.project&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;manusia&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
	&amp;lt;/parent&amp;gt;

    &amp;lt;!-- groupId dan version tidak didefinisikan lagi --&amp;gt;
	&amp;lt;artifactId&amp;gt;manusia-kepala&amp;lt;/artifactId&amp;gt;
	&amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;

	&amp;lt;name&amp;gt;manusia-kepala&amp;lt;/name&amp;gt;
	&amp;lt;url&amp;gt;http://kepala.manusia.projects.org&amp;lt;/url&amp;gt;

    &amp;lt;!-- Walaupun dependecy di sini hanya ada 2, yaitu spring-core dan postgresql driver,
         sebetulnya juga ada slf4j, logback-classic dan junit yang diinherit dari parent POM --&amp;gt;
	&amp;lt;dependencies&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;4.0.4.RELEASE&amp;lt;/version&amp;gt;
		&amp;lt;/dependency&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.postgresql&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;postgresql&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;9.3-1100-jdbc41&amp;lt;/version&amp;gt;
		&amp;lt;/dependency&amp;gt;
	&amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Untuk POM manusia-badan, manusia-tangan dan manusia-kaki sama saja. tinggal sesuaikan saja artifactId, packaging, name, url dan daftar dependency-nya.&lt;/p&gt;

&lt;h2 id=&#34;project-aggregation&#34;&gt;Project Aggregation&lt;/h2&gt;

&lt;p&gt;Project aggregation bertujuan supaya kita dapat mengagregasi module project ke parent project dengan menambahkan tag &lt;code&gt;modules&lt;/code&gt; pada parent POM. Jadi, sekarang parent POM nya menjadi seperti ini:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
  xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;
  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

  &amp;lt;groupId&amp;gt;org.projects&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;manusia&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
  &amp;lt;packaging&amp;gt;pom&amp;lt;/packaging&amp;gt;

  &amp;lt;name&amp;gt;manusia&amp;lt;/name&amp;gt;
  &amp;lt;url&amp;gt;http://manusia.projects.org&amp;lt;/url&amp;gt;
  
  &amp;lt;!-- Agregasi project yang berkaitan.
       Definisinya menggunakan artifact id dari masing-masing modul. --&amp;gt;
  &amp;lt;modules&amp;gt;
  	&amp;lt;module&amp;gt;manusia-kepala&amp;lt;/module&amp;gt;
  	&amp;lt;module&amp;gt;manusia-badan&amp;lt;/module&amp;gt;
  	&amp;lt;module&amp;gt;manusia-tangan&amp;lt;/module&amp;gt;
  	&amp;lt;module&amp;gt;manusia-kaki&amp;lt;/module&amp;gt;
  &amp;lt;/modules&amp;gt;

  &amp;lt;properties&amp;gt;
    &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
  &amp;lt;/properties&amp;gt;

  &amp;lt;dependencies&amp;gt;
	&amp;lt;dependency&amp;gt; 
	  &amp;lt;groupId&amp;gt;ch.qos.logback&amp;lt;/groupId&amp;gt;
	  &amp;lt;artifactId&amp;gt;logback-classic&amp;lt;/artifactId&amp;gt;
	  &amp;lt;version&amp;gt;1.1.2&amp;lt;/version&amp;gt;
	&amp;lt;/dependency&amp;gt;
  	&amp;lt;dependency&amp;gt;
		&amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;1.7.7&amp;lt;/version&amp;gt;
	&amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;
      &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
  &amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;coba&#34;&gt;Coba&lt;/h2&gt;

&lt;p&gt;Untuk melihat hasilnya seperti apa, masuk ke direktori &lt;code&gt;/home/budi/project/manusia&lt;/code&gt; (direktori parent project), lalu jalankan perintah &lt;code&gt;mvn clean package&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Memilih Distro Linux</title>
      <link>https://budiariyanto.github.io/2014/01/25/memilih-distro-linux/</link>
      <pubDate>Sat, 25 Jan 2014 17:50:04 +0700</pubDate>
      
      <guid>https://budiariyanto.github.io/2014/01/25/memilih-distro-linux/</guid>
      <description>&lt;p&gt;Saya sudah cukup lama berkelana gonta-ganti distro linux, sejak akhir tahun 2006. Distro yang pernah saya pakai adalah &lt;a href=&#34;http://www.ubuntu.com&#34;&gt;Ubuntu&lt;/a&gt;, &lt;a href=&#34;http://www.opensuse.org&#34;&gt;openSUSE&lt;/a&gt;, &lt;a href=&#34;http://fedoraproject.org&#34;&gt;Fedora&lt;/a&gt;, &lt;a href=&#34;http://www.linuxmint.com&#34;&gt;Mint&lt;/a&gt;, &lt;a href=&#34;http://www.slackware.com&#34;&gt;Slackware&lt;/a&gt; dan &lt;a href=&#34;http://www.archlinux.org&#34;&gt;Arch&lt;/a&gt;. Pernah juga hanya sekedar coba-coba Backtrack(sekarang namanya &lt;a href=&#34;http://www.kali.org&#34;&gt;Kali Linux&lt;/a&gt;), &lt;a href=&#34;http://www.slax.org&#34;&gt;Slax&lt;/a&gt; dan &lt;a href=&#34;http://puppylinux.org&#34;&gt;Puppy&lt;/a&gt;. Orang yang baru berkenalan dengan linux biasanya bernasib sama seperti saya waktu dulu. Bingung dengan banyaknya pilihan distro linux yang sudah seperti hutan belantara. Karena bingung, akhirnya bertanya ke sana kemari distro linux yang ini dengan yang itu bagus yang mana? Jawaban orang-orang yang ditanya pun bervariasi. Orang-orang biasanya menjawab dengan hal-hal yang bagus-bagus mengenai distro linux yang dia gunakan. Karena semuanya bagus, bertanya kepada orang-orang yang sudah menggunakan distro linux tidak menjawab kebingungan saya. Yang ada malah tambah bingung karena kok semuanya bagus. Akhirnya ya harus coba-coba sendiri. Lama kelamaan, saya tau bahwa distro linux itu memang ada faktor selera dan masing-masing distro linux mempunyai rancangan dan tujuan masing-masing. Jadi, tidak ada distro linux yang paling bagus. Semua tergantung selera dan kebutuhan. Maka dari itu, saya ingin membantu Anda yang baru berkenalan dengan linux, dengan membagikan pengalaman saya mengenai perjalanan saya belajar linux. Semoga membantu.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;bagaimana-caranya-agar-betul-betul-mengerti-cara-kerja-linux&#34;&gt;Bagaimana Caranya Agar Betul-Betul Mengerti Cara Kerja Linux?&lt;/h2&gt;

&lt;p&gt;Distro linux adalah distribusi linux. Perbedaan yang paling kelihatan antara distro satu dengan yang lain adalah apa yang Anda dapat ketika pertama kali selesai menginstall distro tersebut. Misalnya kalau kita menginstall Ubuntu, selesai menginstall akan ada GUI bernama Unity(jaman dulu menggunakan GNOME), ada aplikasi office, transmission(untuk download via torrent), firefox dan lain-lain. Kalau install Arch, tidak ada GUI. Harus install sendiri. Yang ada hanya aplikasi CLI yang sangat umum. Tapi apapun distronya, intinya itu adalah linux. Jadi seharusnya mau menggunakan distro apapun kita tetap mengerti cara kerjanya. Nah bagaimana caranya agar kita tidak hanya mengerti distro linux, tapi sampai mengerti cara kerja linux itu sendiri? Berikut ini tips dari saya:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Gunakanlah linux yang design-nya sederhana. Yang sederhana design distronya lho ya. Bukan pemakaiannya yang sederhana. Pemakaiannya justru terkesan ribet. Karena sistemnya sederhana, kita harus banyak belajar menggunakan command line interface, compile aplikasi dan dependensinya secara manual, konfigurasi environment variable, system services, partisi, struktur direktori dan lain sebagainya. Maka dari itu, supaya bisa belajar dengan nikmat, pilih distro yang dokumentasinya lengkap. Pilihan saya untuk belajar linux adalah Slackware.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Karena harus banyak membaca dokumentasi atau referensi dalam bahasa inggris, ya belajarlah bahasa inggris. Tidak usah sampai bisa berbicara menggunakan bahasa inggris. Cukup sampai bisa membaca dan mengerti kalimat-kalimat dalam bahasa inggris saja.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Kalau tidak berani mencoba tidak akan bisa. Perlu diingat, hasil percobaan itu ada 2. Berhasil atau gagal. Kalau berhasil ya syukur, kalau gagal separah-parahnya bisa menlenyapkan seisi harddisk. Maka dari itu saya sangat menyarankan Anda membeli harddisk external untuk membackup semua data yang penting. Yang tidak penting mau ikutan dibackup juga terserah :) Yang penting ada backupnya.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Apa daya peralatan untuk percobaan sangat minimal. Misalkan hanya punya 1 laptop atau PC. Ya kalau situasi dan kondisinya seperti ini bisa dengan menginstall linux dan sistem operasi yang lain secara berdampingan(&lt;em&gt;dual-boot&lt;/em&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Harddisk untuk backup sudah dibeli dan data sudah dibackup. Seharusnya tidak ada lagi alasan untuk menyerah kecuali mesin yang Anda pakai tiba-tiba rusak total atau meledak. Jangan menyerah ketika belum terbiasa menggunakan linux. Rasanya memang aneh dan tidak enak, tapi begitu sudah terbiasa Anda tidak akan kembali lagi menginstall OS lama Anda yang mungkin sangat mudah terkena virus dan tidak stabil itu. :p&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Setelah nyaman dengan Slackware, barulah coba beralih ke distro lain. Saya rasa kira-kira paling lama 1 minggu Anda sudah bisa mengerti distro lain yang baru Anda pakai itu. Kok bisa? Karena sudah mengerti cara kerja &lt;em&gt;low-level&lt;/em&gt;-nya. Cara yang &lt;em&gt;low-level&lt;/em&gt; saja bisa kok, apalagi yang cuma &lt;em&gt;klak-klik klak-klik&lt;/em&gt; pakai mouse begitu. Distro yang lebih kompleks biasanya menawarkan kemudahan di sisi pengguna. Istilah populernya &lt;em&gt;user-friendly&lt;/em&gt;. Semakin &lt;em&gt;user-friendly&lt;/em&gt;, cara kerja sistem yang sebenarnya semakin tersembunyi. Maka dari itu kalau kita langsung menggunakan distro yang &lt;em&gt;user-friendly&lt;/em&gt;, kita biasanya akan &amp;ldquo;terjebak&amp;rdquo; dengan kemudahan yang ditawarkan, sehingga sudah malas belajar hal-hal yang bersifat &lt;em&gt;low-level&lt;/em&gt;. Kalau sudah begini ya kita hanya bisa menggunakan distro tersebut, tapi tidak bisa menggunakan linux yang sebenarnya.&lt;/p&gt;

&lt;h2 id=&#34;distro-linux-yang-mana-yang-harus-saya-pilih&#34;&gt;Distro Linux Yang Mana Yang Harus Saya Pilih?&lt;/h2&gt;

&lt;p&gt;Setelah mengerti cara kerja linux, inilah saatnya memilih distro yang sesuai dengan kebutuhan dan selera kita. Berdasarkan pengalaman saya, ada 4 kelompok distro linux berdasarkan tujuannya atau &lt;em&gt;by designnya&lt;/em&gt;, yaitu:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Minimalis&lt;br /&gt;
Distro minimalis adalah distro yang design sistemnya sederhana. Pilihan saya untuk distro minimalis ini adalah Slackware dan Arch. Lebih spesifik lagi, kalau kita membutuhkan sistem yang super stabil pakailah Slackware. Cocok untuk dipasang di server maupun desktop. Kalau suka atau butuh sistem yang bisa memberikan sensasi seperti membangun distro sendiri, aplikasi-aplikasinya selalu &lt;em&gt;up to date&lt;/em&gt; menggunakan versi rilis yang terakhir dan menggunakan teknologi yang baru muncul(dikenal dengan istilah &lt;em&gt;bleeding edge&lt;/em&gt;), pakailah Arch.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;User-friendly / beginner / desktop&lt;br /&gt;
Sesuai sebutannya, distro yang &lt;em&gt;user-friendly&lt;/em&gt; adalah distro yang mudah digunakan. Saya menyarankan Mint atau Ubuntu karena sangat populer(banyak yang pakai), cukup stabil dan benar-benar mudah. Kendala mungkin ada, tapi hanya sedikit. &lt;em&gt;Tweaking&lt;/em&gt; sebentar langsung jalan dengan baik. Biasa diinstall di komputer desktop atau laptop.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Khusus server&lt;br /&gt;
Distro jenis ini sangat memprioritaskan kestabilan sistem daripada teknologi terbaru yang ada saat ini. Kelebihannya, sistemnya sangat stabil tapi kekurangannya adalah aplikasi-aplikasinya banyak yang sudah &amp;ldquo;kuno&amp;rdquo;. Saran saya adalah Debian. Walaupun Debian dikategorikan sebagai distro untuk server, tapi banyak juga orang yang menginstallnya di desktop atau laptop dengan mengikuti &lt;em&gt;branch&lt;/em&gt; Debian testing atau sekalian &lt;em&gt;branch&lt;/em&gt; unstable(Sid). Kalau tidak suka Debian alternatifnya bisa menggunakan Slackware.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tujuan sangat spesifik&lt;br /&gt;
Misalnya kita ingin melakukan &lt;em&gt;security penetration test&lt;/em&gt;, kita bisa gunakan Kali Linux. Kalau butuh OS yang bisa diinstall dan dijalankan lewat flashdisk, kita bisa install puppy atau slax. Saya sendiri memilih slax karena based on Slackware yang notabene stabil.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;distro-paling-josss-menurut-saya&#34;&gt;Distro Paling &amp;ldquo;Josss&amp;rdquo; Menurut Saya&lt;/h2&gt;

&lt;p&gt;Untuk desktop/laptop saya memilih Ubuntu. Alasannya:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Karena pekerjaan saya membuat program, maka saya mau linux yang mudah digunakan dan cukup stabil.&lt;/li&gt;
&lt;li&gt;Semua hardware berjalan dengan baik di laptop saya.&lt;/li&gt;
&lt;li&gt;Aplikasi yang tersedia super lengkap.&lt;/li&gt;
&lt;li&gt;Komunitasnya aktif sehingga kalau ada permasalahan menyelesaikannya bisa lebih cepat.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Untuk server saya memilih Slackware. Alasannya:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Super stabil.&lt;/li&gt;
&lt;li&gt;Cukup secure.&lt;/li&gt;
&lt;li&gt;Tidak &amp;ldquo;kuno-kuno&amp;rdquo; amat karena biasanya paling lama 1 tahun sudah keluar versi baru dengan aplikasi-aplikasi yang sudah diupdate. Kalau Debian bisa 2 - 3 tahun baru rilis.&lt;/li&gt;
&lt;li&gt;Aplikasi bawaannya cukup lengkap.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Begitulah kira-kira pengalaman saya. Kalau Anda mau ngikut silahkan, mau eksplorasi sendiri juga boleh. Ikuti kebutuhan dan selera Anda :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Tutorial Singkat Maven</title>
      <link>https://budiariyanto.github.io/2014/01/17/tutorial-singkat-maven/</link>
      <pubDate>Fri, 17 Jan 2014 17:26:33 +0700</pubDate>
      
      <guid>https://budiariyanto.github.io/2014/01/17/tutorial-singkat-maven/</guid>
      <description>&lt;h2 id=&#34;apa-itu-maven&#34;&gt;Apa itu Maven?&lt;/h2&gt;

&lt;p&gt;Maven adalah suatu &lt;em&gt;tool&lt;/em&gt; untuk menstandarkan dan &lt;em&gt;memanage&lt;/em&gt; project, mempermudah proses &lt;em&gt;build&lt;/em&gt; dalam suatu project, mendefinisikan secara jelas apa saja isi project dan mempermudah dalam membagi-bagikan (&lt;em&gt;share&lt;/em&gt;) file .jar di semua project. Maven sering di-versuskan dengan ant, atau bahkan ada yang bilang sama saja. Menurut saya, maven mempunyai tujuan yang lebih luas daripada ant yang hanya fokus untuk &lt;em&gt;build tool&lt;/em&gt; dan membuat task-task tertentu saja. Fitur-fitur ant ada pada maven bahkan maven bisa diintegrasikan dengan ant via maven plugin.&lt;/p&gt;

&lt;h2 id=&#34;kenapa-harus-pakai-maven&#34;&gt;Kenapa harus pakai Maven?&lt;/h2&gt;

&lt;p&gt;Suatu project pasti mempunyai struktur direktori. Struktur direktori project ini biasa disebut &lt;em&gt;project template&lt;/em&gt;. Struktur direktori setiap orang atau setiap tim berbeda. Setiap tim menentukan standarnya sendiri, lalu jika ada orang baru masuk dalam tim tersebut, orang baru itu mengikuti standar project template yang sudah ada. Yang biasa dilakukan, orang baru tersebut membuat project baru di IDE, lalu melihat catatan project template yang sudah ada itu bagaimana. Struktur direktori project baru tersebut berusaha dibuat sama dengan struktur direktori standar project dengan membuat folder-folder, menambahkan file-file dan sebagainya. Dengan maven, pada umumnya kita cukup sekali membuat archetype untuk 1 jenis project. Setelah itu ketika membuat project baru, kita tinggal mengenerate project template dengan menggunakan archetype yang sudah dibuat tadi. Semua hal mengenai project template langsung bisa terkonfigurasi secara otomatis sesuai standar. Kalau ada keperluan khusus, baru kita tambahkan sendiri.&lt;/p&gt;

&lt;p&gt;Selain permasalahan project template, hampir di setiap project kita menggunakan library. Jika kita menggunakan library dalam suatu project, berarti project kita dependen terhadap library tersebut. Maka library tersebut adalah dependency dari project kita. Nah, peran maven di sini adalah memanage dependency sehingga programmer dapat dengan mudah menambahkan library yang ingin digunakan. &amp;ldquo;Ah, cuma nambah dependency gitu aja kok harus pakai maven? Repot banget sih..&amp;rdquo;. Perlu diketahui, library tidak selamanya &lt;em&gt;&amp;ldquo;stand-alone&amp;rdquo;&lt;/em&gt;. Jangan berasumsi bahwa jika kita ingin menambahkan library A dan B, yang kita tambahkan ke project ya hanya A dan B. Sering kali misalnya library A dependen terhadap library B, C, D, E, F dan G. Library H dependen terhadap library I, J dan K. Jadi, library yang ingin kita tambahkan sebetulnya hanya 2 (A dan H), tapi karena harus menambahkan juga dependensinya(B, C, D, E, F, G, I, J, K) pada akhirnya ada 11 library yang harus ditambahkan. Belum lagi kalau ternyata semua dependensi itu harus didownload satu per satu, di tempat yang berbeda-beda pula. Belum lagi kalau source code kita karena sesuatu hal harus dipindahkan ke mesin lain. Dengan asumsi bahwa environmentnya berbeda, kita harus setting ulang semua path dari library tersebut supaya dapat ditemukan oleh IDE. Hal ini membuat pusing kepala. Yang tadinya saya mau mulai membuat kode program dengan nyaman, harus repot mengurus hal-hal yang demikian. Maven membantu menyelesaikan permasalahan ini.&lt;/p&gt;

&lt;p&gt;Maven juga membantu dalam hal portability project. Saya pribadi menginginkan project dapat dibuka di IDE manapun dengan baik. Nah, kalau kita buat project baru di Netbeans nanti kalau ganti IDE menggunakan Eclipse project jadi tidak bisa dibuka. Kalau awalnya menggunakan Eclipse, dibuka menggunakan Netbeans harus menggunakan project importer milik Netbeans, yang saya sendiri masih ragu apakah bisa menyelesaikan semua kasus import project dengan baik. Untuk mengatasi hal ini, semua project saya buat menggunakan maven. Hati saya menjadi tenang. IDE java kelas kakap seperti Netbeans, Eclipse dan IntelliJ IDEA dapat membuka maven project dengan baik. Atau kalau project mau dibuka menggunakan editor seperti nano atau vim pun juga tidak masalah. &lt;em&gt;Last but not least&lt;/em&gt;, hal-hal inilah yang membuat maven berperan penting dalam setiap project.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;installasi-dan-konfigurasi-maven&#34;&gt;Installasi dan Konfigurasi Maven&lt;/h2&gt;

&lt;p&gt;Maven bisa didownload di &lt;a href=&#34;http://maven.apache.org&#34;&gt;maven website&lt;/a&gt;. Saya merekomendasikan menggunakan Maven 3. Setelah didownload, cara menginstallnya cukup diekstrak saja. Setelah diekstrak, Anda harus setting environment variable supaya Anda dapat menjalankan maven dengan mudah.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;M2_HOME = /path/to/your/maven/installation/directory
PATH = $PATH:$M2_HOME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sebagai catatan, setting untuk environment variable berbeda-beda caranya. Sesuaikan dengan OS yang Anda gunakan.&lt;/p&gt;

&lt;p&gt;Kalau Anda menggunakan linux, coba cek dulu di package repository distro yang Anda pakai ada maven atau tidak. Kalau ada, barang kali Anda bisa mencoba menginstall maven menggunakan repository dari distro tersebut supaya lebih mudah. Kalau saya pribadi lebih suka download dari website maven, install dan konfigurasi sendiri.&lt;/p&gt;

&lt;h2 id=&#34;pom-project-object-model&#34;&gt;POM (Project Object Model)&lt;/h2&gt;

&lt;p&gt;POM pasti ada dalam setiap project maven. Letaknya di root directory project dan bernama &lt;code&gt;pom.xml&lt;/code&gt;. POM berisi deskripsi dan konfigurasi project. Contohnya di dalam POM ada &lt;code&gt;groupId&lt;/code&gt;, &lt;code&gt;artifactId&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt;, nama project, website project, siapa developernya, deklarasi project dependensi, deklarasi maven plugin dan konfigurasi pluginnya dan lain sebagainya. Bentuk umum POM seperti ini:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;
  xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
  xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;
  &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

  &amp;lt;!-- The Basics --&amp;gt;
  &amp;lt;groupId&amp;gt;...&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;...&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;...&amp;lt;/version&amp;gt;
  &amp;lt;packaging&amp;gt;...&amp;lt;/packaging&amp;gt;
  &amp;lt;dependencies&amp;gt;...&amp;lt;/dependencies&amp;gt;
  &amp;lt;parent&amp;gt;...&amp;lt;/parent&amp;gt;
  &amp;lt;dependencyManagement&amp;gt;...&amp;lt;/dependencyManagement&amp;gt;
  &amp;lt;modules&amp;gt;...&amp;lt;/modules&amp;gt;
  &amp;lt;properties&amp;gt;...&amp;lt;/properties&amp;gt;

  &amp;lt;!-- Build Settings --&amp;gt;
  &amp;lt;build&amp;gt;...&amp;lt;/build&amp;gt;
  &amp;lt;reporting&amp;gt;...&amp;lt;/reporting&amp;gt;

  &amp;lt;!-- More Project Information --&amp;gt;
  &amp;lt;name&amp;gt;...&amp;lt;/name&amp;gt;
  &amp;lt;description&amp;gt;...&amp;lt;/description&amp;gt;
  &amp;lt;url&amp;gt;...&amp;lt;/url&amp;gt;
  &amp;lt;inceptionYear&amp;gt;...&amp;lt;/inceptionYear&amp;gt;
  &amp;lt;licenses&amp;gt;...&amp;lt;/licenses&amp;gt;
  &amp;lt;organization&amp;gt;...&amp;lt;/organization&amp;gt;
  &amp;lt;developers&amp;gt;...&amp;lt;/developers&amp;gt;
  &amp;lt;contributors&amp;gt;...&amp;lt;/contributors&amp;gt;

  &amp;lt;!-- Environment Settings --&amp;gt;
  &amp;lt;issueManagement&amp;gt;...&amp;lt;/issueManagement&amp;gt;
  &amp;lt;ciManagement&amp;gt;...&amp;lt;/ciManagement&amp;gt;
  &amp;lt;mailingLists&amp;gt;...&amp;lt;/mailingLists&amp;gt;
  &amp;lt;scm&amp;gt;...&amp;lt;/scm&amp;gt;
  &amp;lt;prerequisites&amp;gt;...&amp;lt;/prerequisites&amp;gt;
  &amp;lt;repositories&amp;gt;...&amp;lt;/repositories&amp;gt;
  &amp;lt;pluginRepositories&amp;gt;...&amp;lt;/pluginRepositories&amp;gt;
  &amp;lt;distributionManagement&amp;gt;...&amp;lt;/distributionManagement&amp;gt;
  &amp;lt;profiles&amp;gt;...&amp;lt;/profiles&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kita bisa lihat ada 4 bagian dalam 1 POM. Basic, build settings, project information dan environment settings. Yang paling sering dituliskan dalam POM adalah bagian basic dan build settings. Anda bisa membaca referensi tentang &lt;code&gt;pom.xml&lt;/code&gt; secara lengkap di &lt;a href=&#34;http://maven.apache.org/pom.html&#34;&gt;sini&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;archetypes&#34;&gt;Archetypes&lt;/h2&gt;

&lt;p&gt;Archetype bisa diartikan sebagai deskripsi dari project template. Archetype maven sebetulnya sudah ada dan siap digunakan. Untuk mengecek sekaligus menggunakannya, Anda bisa menjalankan perintah&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mvn archetype:generate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tapi, karena archetype yang tersedia sangat general, maka kadang kala kita perlu membuat archetype sendiri yang sesuai dengan kebutuhan kita.&lt;/p&gt;

&lt;h2 id=&#34;membuat-sendiri-archetype&#34;&gt;Membuat Sendiri Archetype&lt;/h2&gt;

&lt;p&gt;Membuat archetype bisa dengan 2 cara. Kita buat project template sendiri dengan membuat folder-folder sendiri, disusun sendiri, menambah resource yang diperlukan lalu membuat &lt;code&gt;pom.xml&lt;/code&gt;nya. Cara kedua dengan menggenerate general archetype terlebih dahulu menggunakan maven. Karena cara kedua menurut saya lebih bagus, mari kita bahas.&lt;/p&gt;

&lt;p&gt;Buka terminal, buat folder baru, misalkan namanya &lt;code&gt;archetypeku&lt;/code&gt; lalu masuklah ke folder tersebut. Untuk menggenerate general archetype, kita dapat menjalankan perintah berikut&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mvn archetype:generate
   -DgroupId=[group id project kita]
   -DartifactId=[artifact id project kita]
   -DarchetypeArtifactId=maven-archetype-archetype
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setelah digenerate, akan terbentuk struktur direktori sebagai berikut&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;archetypeku
|-- pom.xml
`-- src
    `-- main
        `-- resources
            |-- META-INF
            |   `-- maven
            |       `--archetype.xml
            `-- archetype-resources
                |-- pom.xml
                `-- src
                    |-- main
                    |   `-- java
                    |       `-- App.java
                    `-- test
                        `-- java
                            `-- AppTest.java
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;File-file hasil generate ini punya kesalahan. Kesalahannya ada pada file &lt;code&gt;pom.xml&lt;/code&gt; yang ada di dalam folder &lt;code&gt;archetype-resources&lt;/code&gt;. Buka &lt;code&gt;pom.xml&lt;/code&gt; menggunakan text editor apa saja, lalu ganti bagian groupId, artifactId dan version sehingga tampak seperti berikut&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;groupId&amp;gt;${groupId}&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;${artifactId}&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;${version}&amp;lt;/version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setelah kesalahan dibetulkan, kita bisa dengan tenang menambahkan apa saja yang diperlukan ke dalam &lt;code&gt;pom.xml&lt;/code&gt; tadi, misalnya deklarasi dependensi yang diperlukan dan informasi-informasi lain tentang project. Kita juga bisa menambahkan folder-folder yang diperlukan, tapi jangan lupa untuk mendaftarkan folder-folder tambahan tadi ke dalam archetype descriptor(&lt;code&gt;archetype.xml&lt;/code&gt;). Contoh archetype.xml adalah sebagai berikut&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;archetype&amp;gt;
&amp;lt;archetype&amp;gt;
  &amp;lt;id&amp;gt;archetypeku&amp;lt;/id&amp;gt;
  &amp;lt;sources&amp;gt;
    &amp;lt;source&amp;gt;src/main/java/App.java&amp;lt;/source&amp;gt;
  &amp;lt;/sources&amp;gt;
  &amp;lt;resources&amp;gt;
		&amp;lt;resource&amp;gt;src/main/resources&amp;lt;/resource&amp;gt;
  &amp;lt;/resrouces&amp;gt;
  &amp;lt;testSources&amp;gt;
    &amp;lt;source&amp;gt;src/test/java/AppTest.java&amp;lt;/source&amp;gt;
  &amp;lt;/testSources&amp;gt;
  &amp;lt;siteResources&amp;gt;
    &amp;lt;siteResource&amp;gt;src/site&amp;lt;/siteResource&amp;gt;
  &amp;lt;/siteResources&amp;gt;
&amp;lt;/archetype&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tag &lt;code&gt;id&lt;/code&gt; nilainya harus sama dengan tag &lt;code&gt;id&lt;/code&gt; pada archetype &lt;code&gt;pom.xml&lt;/code&gt; yang terletak pada root directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;sources&amp;gt;, &amp;lt;resources&amp;gt;, &amp;lt;testSources&amp;gt;, &amp;lt;testResources&amp;gt;&lt;/code&gt; dan &lt;code&gt;&amp;lt;siteResources&amp;gt;&lt;/code&gt; tag mencerminkan pengelompokan pada project. Misalkan seperti yang tampak pada contoh archetype descriptor di atas&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;sources&amp;gt; = src/main/java
    &amp;lt;resources&amp;gt; = src/main/resources
    &amp;lt;testSources&amp;gt; = src/test/java
    &amp;lt;testResources&amp;gt; = src/test/resources
    &amp;lt;siteResources&amp;gt; = src/site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Berarti, di dalam folder &lt;code&gt;archetype-resources&lt;/code&gt; harus ada folder-folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;src/main/java
src/main/resources
src/test/java
src/test/resources
src/site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Di dalam folder &lt;code&gt;src/main/java&lt;/code&gt; harus ada file &lt;code&gt;App.java&lt;/code&gt; dan di dalam folder &lt;code&gt;src/test/java&lt;/code&gt; harus ada file &lt;code&gt;AppTest.java&lt;/code&gt;. Ini berarti bisa dikatakan apa yang sudah dideklarasikan di dalam archetype deskriptor harus dibuat secara nyata di dalam folder archetype-resources. Setelah semua ini selesai, berarti archetype Anda sudah siap dideploy.&lt;/p&gt;

&lt;h2 id=&#34;mendeploy-archetype&#34;&gt;Mendeploy Archetype&lt;/h2&gt;

&lt;p&gt;Untuk mendeploy archetype di mesin lokal kita, masuk ke root directory archetype project dan jalankan perintah&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mvn install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jika hasilnya sukses, berarti archetype sudah bisa digunakan, tapi ya hanya di mesin lokal kita. Nah, bagaimana caranya supaya teman-teman 1 tim kita bisa menggunakannya? Kita bisa mendeploynya ke repository maven internal kita misalnya. Saya sendiri menggunakan nexus. Saya akan membahas bagaimana mendeploy archetype bikinan sendiri ke repository nexus, tapi saya akan berasumsi Anda sudah menginstall nexus sendiri. Kalau Anda belum tau tentang nexus dan ingin menginstallnya, Anda bisa baca dokumentasi dari &lt;a href=&#34;http://www.sonatype.org/nexus/&#34;&gt;website resminya&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;mendeploy-archetype-buatan-sendiri-ke-repository-nexus&#34;&gt;Mendeploy Archetype Buatan Sendiri ke Repository Nexus&lt;/h2&gt;

&lt;p&gt;Sebelum mendeploy ke nexus, jangan lupa konfigurasi untuk authorization ke server repository nexus. Coba lihat di &lt;code&gt;~/.m2/settings.xml&lt;/code&gt;. Kalau belum ada setting untuk authorization, tambahkan konfigurasi ini&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;settings&amp;gt;
&amp;lt;servers&amp;gt;
        &amp;lt;server&amp;gt;
                &amp;lt;id&amp;gt;snapshots&amp;lt;/id&amp;gt;
                &amp;lt;username&amp;gt;usernameAnda&amp;lt;/username&amp;gt;
                &amp;lt;password&amp;gt;passwordAnda&amp;lt;/password&amp;gt;
        &amp;lt;/server&amp;gt;
			&amp;lt;server&amp;gt;
                &amp;lt;id&amp;gt;releases&amp;lt;/id&amp;gt;
                &amp;lt;username&amp;gt;usernameAnda&amp;lt;/username&amp;gt;
                &amp;lt;password&amp;gt;passwordAnda&amp;lt;/password&amp;gt;
        &amp;lt;/server&amp;gt;
&amp;lt;/servers&amp;gt;
&amp;lt;/settings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kalau sudah, masuk ke root directory project archetype yang Anda buat, lalu jalankan perintah&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mvn deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kalau sukses, berarti archetype Anda sudah ada di server nexus, archetype catalog juga sudah diupdate dan teman-teman 1 tim Anda sudah bisa menikmati archetype yang Anda buat. Bagaimana caranya?&lt;/p&gt;

&lt;h2 id=&#34;menggenerate-project-menggunakan-archetype-buatan-sendiri&#34;&gt;Menggenerate Project Menggunakan Archetype Buatan Sendiri&lt;/h2&gt;

&lt;p&gt;Jalankan perintah&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mvn archetype:generate -DarchetypeCatalog=http://&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;path/to/repositories&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Good Leader</title>
      <link>https://budiariyanto.github.io/2013/12/26/good-leader/</link>
      <pubDate>Thu, 26 Dec 2013 17:19:49 +0700</pubDate>
      
      <guid>https://budiariyanto.github.io/2013/12/26/good-leader/</guid>
      <description>&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/_3ASoBrFGlc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;Dalam suatu organisasi, pasti ada yang berperan menjadi pemimpin. Menjalani peran sebagai seorang pemimpin sekilas tampak mudah, maka banyak orang yang berlomba-lomba untuk menjadi seorang pemimpin. Punya anak buah, bisa menyuruh, memarahi, datang ke kantor sesuka hati, berkuasa seakan menjadi kenikmatan tersendiri. Pemimpin yang seperti ini saya sebut pemimpin palsu, karena jika perilakunya seperti itu, anak kecil pun juga bisa jadi pemimpin. Menjadi seorang pemimpin sebenarnya tidak semudah itu. Butuh proses yang panjang. Ibarat pahatan patung, dari sebongkah batu yang bentuknya jelek dipoles pelan-pelan, dibentuk, diukir menjadi suatu mahakarya yang indah.
Maka dari itu, saya sebetulnya heran, sekarang banyak pelatihan untuk menjadi pemimpin dalam waktu kurang dari 2 bulan. Pelatihan kepemimpinan seperti ini tepat apabila sasarannya adalah hanya sebatas membuka wawasan tentang kepemimpinan. Jika pelatihan tersebut tujuannya untuk menghasilkan seorang pemimpin yang berkualitas, maka hal tersebut merupakan suatu kesalahan besar, karena tidak ada pemimpin berkualitas yang dibentuk dalam waktu sesingkat itu. Pemimpin yang berkualitas menurut saya, mempunyai kriteria sebagai berikut:&lt;/p&gt;

&lt;h2 id=&#34;berangkat-dari-anak-buah&#34;&gt;Berangkat dari anak buah&lt;/h2&gt;

&lt;p&gt;Seorang pemimpin yang berkualitas harus berangkat dari bawah. Pemimpin dadakan biasanya memiliki attitude yang sama sekali tidak mencerminkan seorang pemimpin. Gila harta, gila kekuasaan. Kerja seenaknya dan sebetulnya tidak tau apa-apa. Juga tidak punya konsep, apalagi punya kemampuan untuk merealisasikannya. Attitudenya rata-rata seperti ini karena dia tidak pernah bisa melihat ke bawah. Ya karena memang tidak pernah merasakan bekerja keras dan bagaimana menjadi anak buah. Kalau ketemu pemimpin seperti ini, tiap hari makan ati. Di tempat saya bekerja, sampai-sampai sempat ada yang berkomentar: &amp;ldquo;Saya kan cuma pelaksana, jadi pemimpin mah enak&amp;rdquo;. O ya? Jika Anda juga berpikir hal yang sama, lanjutkan saja membaca artikel ini. Mungkin Anda akan berubah pikiran. &lt;/p&gt;

&lt;h2 id=&#34;dapat-merebut-hati-orang-orang-di-sekitarnya&#34;&gt;Dapat merebut hati orang-orang di sekitarnya&lt;/h2&gt;

&lt;p&gt;Ada pemimpin, ada pula yang dipimpin. Mereka harus bersinergi. Wujud konkretnya adalah kerjasama(&lt;em&gt;teamwork&lt;/em&gt;). Untuk dapat bekerjasama dengan baik, diperlukan chemistry. Chemistry dibentuk secara perlahan-lahan, karena di dalamnya terdapat unsur respect, kenyamanan dan kepercayaan(&lt;em&gt;trust&lt;/em&gt;). Untuk mendapatkannya, seorang pemimpin harus pandai-pandai merebut hati anak buahnya. Sayangnya, yang terjadi sekarang banyak pemimpin terlihat sering marah-marah, tidak punya kepedulian dan sok berkuasa.&lt;/p&gt;

&lt;h2 id=&#34;dapat-menjadi-contoh-bagi-pengikutnya&#34;&gt;Dapat menjadi contoh bagi pengikutnya&lt;/h2&gt;

&lt;p&gt;Tidak bisa dipungkiri, pemimpin adalah panutan. Karena ia adalah seorang panutan, ia harus bisa menunjukkan bagaimana mengerjakan sesuatu dengan baik kepada anak buahnya. Lalu anak buah akan mengikuti cara bekerja yang baik tersebut.
Jika perilaku kita buruk, pengikut atau anak buah kita akan menjadi berperilaku buruk juga. Orang-orang yang berperilaku buruk karena mencontoh apa yang kita perbuat akan menularkan keburukannya kepada orang lain lagi. Pada akhirnya kita akan menjadi sumber perilaku buruk di lingkugan kita. Oh my God, mendingan saya lepas status pemimpin yang menempel pada saya daripada saya menjadi sumber keburukan.&lt;/p&gt;

&lt;h2 id=&#34;berpengalaman-dan-berwawasan-luas&#34;&gt;Berpengalaman dan berwawasan luas&lt;/h2&gt;

&lt;p&gt;Bagaimana bisa menjadi contoh jika pengalaman dan wawasan saja tidak punya? Namun dari berbagai macam hal, bagi saya yang paling penting adalah pengalaman karena dari pengalaman muncul kebijaksanaan. Orang yang bijaksana, mempunyai hati nurani. Kebijaksanaan lebih tinggi tingkatannya daripada wawasan dan kecerdasan. Tapi, bukan berarti wawasan dan kecerdasan tidak penting ya. Seorang pemimpin juga harus tetap punya kedua hal tersebut.&lt;/p&gt;

&lt;h2 id=&#34;menjaga-keadilan-fairness&#34;&gt;Menjaga keadilan(&lt;em&gt;fairness&lt;/em&gt;)&lt;/h2&gt;

&lt;p&gt;Anak buah juga manusia. Setiap manusia ingin diperlakukan adil dan rentan terhadap iri hati. Pemimpin harus dapat memperlakukan anak buahnya dengan adil. Contoh sederhananya, masalah pembagian bonus atau uang prestasi. Bonus dibagi berdasarkan usaha yang dikeluarkan oleh masing-masing orang. Semakin banyak bekerja, semakin besar bonus yang didapat. Itu fair. Bayangkan jika pemimpin tidak mau tau. Pokoknya pembagian bonus dipukul rata. Alhasil yang bekerja keras merasa mendapat bonus yang tidak sesuai, yang malas bekerja senyam-senyum karena menerima lebih banyak dari yang seharusnya. Dalam jangka panjang, efek sampingnya adalah ketidakstabilan organisasi, karena antar anak buah tidak dapat bersinergi. Yang ada hanya rasa iri dan dengki.&lt;/p&gt;

&lt;h2 id=&#34;berani-membuat-keputusan-yang-terbaik&#34;&gt;Berani membuat keputusan yang terbaik&lt;/h2&gt;

&lt;p&gt;Membuat keputusan bukan hal yang mudah. Pada dasarnya, keputusan yang diambil tidak dapat membuat semua orang senang dan melayang. Pro dan kontra pasti ada. Pemimpin seperti Jokowi-Ahok pun tak luput dari serangan setelah menetapkan keputusan. Namun serangan-serangan dan konflik yang terjadi mereka hadapi dan berusaha mereka selesaikan. Mereka menghadapi konflik karena berjuang untuk yang terbaik, bukan berjuang untuk menyenangkan semua orang. Menyenangkan semua orang itu &lt;em&gt;absurd&lt;/em&gt; dan menghindari konflik itu pengecut.&lt;/p&gt;

&lt;h2 id=&#34;mempunyai-integritas&#34;&gt;Mempunyai integritas&lt;/h2&gt;

&lt;p&gt;Integritas artinya kesesuaian perkataan dengan tindakan. Karena itu, pemimpin yang mempunyai integritas otomatis adalah pemimpin yang jujur dan apa adanya, bukan ada apanya. Misalkan saya seorang pemimpin, lalu saya bilang kepada anak buah saya: &amp;ldquo;Kita harus disiplin dan pandai mengatur waktu.&amp;rdquo;. Kenyataannya, tiap hari saya terlambat masuk kantor dan pekerjaan saya berantakan. Seharusnya, saya tidak boleh tersinggung ketika dibilang bullshit oleh anak buah saya. Pemimpin yang tidak mempunyai integritas tidak akan bisa membangun kepercayaan terhadap anak buahnya.&lt;/p&gt;

&lt;h2 id=&#34;melindungi-dan-mengayomi&#34;&gt;Melindungi dan mengayomi&lt;/h2&gt;

&lt;p&gt;Selain sebagai panutan, pemimpin adalah tempat bersandar bagi anak buahnya. Ketika anak buah mengalami masalah dalam pekerjaan ataupun urusan pribadi, pemimpin bisa dijadikan teman curhat karena seorang pemimpin harus bisa mempertahankan &lt;em&gt;chemistry&lt;/em&gt; yang sudah terbentuk dan membagun moral dan semangat anak buahnya. Juga harus bisa melindungi anak buahnya. Suatu ketika mungkin anak buah melakukan kesalahan, tapi toh tanggung jawab tetap ada pada seorang pemimpin. Jadi, ia harus siap pasang badan. Pemimpin yang hanya bisa melempar kesalahan pada anak buahnya tidak layak disebut pemimpin.&lt;/p&gt;

&lt;h2 id=&#34;membantu-menyiapkan-masa-depan-pengikutnya&#34;&gt;Membantu menyiapkan masa depan pengikutnya&lt;/h2&gt;

&lt;p&gt;Pemimpin harus memikirkan masa depan anak buahnya. Maka dari itu, ia harus dapat melihat potensi anak buah lalu membantu mengembangkannya. Setelah potensi anak buah berkembang dan berbuah hasil yang memuaskan, maka saatnya memperjuangkan &lt;em&gt;salary&lt;/em&gt;-nya. Hal ini layak mengingat kita harus memberi penghargaan yang sesuai kepada setiap orang.&lt;/p&gt;

&lt;h2 id=&#34;dapat-mengarahkan-ke-tujuan-yang-ingin-dicapai&#34;&gt;Dapat mengarahkan ke tujuan yang ingin dicapai&lt;/h2&gt;

&lt;p&gt;Pemimpin ibarat nahkoda/kapten kapal seperti &lt;a href=&#34;http://www.imdb.com/title/tt1535109/&#34;&gt;Captain Phillips&lt;/a&gt;. Ia mempunyai visi dan misi. Dapat memprediksi situasi dan kondisi di masa depan. Dapat memberikan solusi ketika terjadi masalah. Maka dari itu, ia bisa mengarahkan ke tujuan yang diinginkan. Mangkannya ada sebutan direktur(&lt;em&gt;director&lt;/em&gt;) untuk seorang pemimpin, yang artinya orang yang mengarahkan.&lt;/p&gt;

&lt;h2 id=&#34;mempunyai-idealisme&#34;&gt;Mempunyai idealisme&lt;/h2&gt;

&lt;p&gt;Karena harus bisa mengarahkan dan mengambil keputusan, maka pemimpin harus mempunyai idealisme. Tidak boleh terombang-ambing oleh lingkungan, situasi dan kondisi. Anda bisa membaca lebih lengkap mengenai &lt;a href=&#34;https://budiariyanto.github.io/2014/05/19/menjadi-idealis/&#34;&gt;idealis&lt;/a&gt; pada artikel saya ini.&lt;/p&gt;

&lt;p&gt;Nah, itulah syarat-syarat yang harus dimiliki seorang pemimpin di luar pekerjaan teknis yang diembannya. Mungkin masih ada yang belum disebutkan. Maka dari itu, tidak heran jika mereka dibayar mahal, dan juga tidak usah iri. Oke, demikianlah apa yang saya pikirkan mengenai seorang pemimpin. Tetap sehat, tetap semangat dan tetap maknyus!&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>