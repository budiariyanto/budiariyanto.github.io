<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: slackware | My Personal Blog]]></title>
  <link href="http://budiariyanto.github.io/blog/categories/slackware/atom.xml" rel="self"/>
  <link href="http://budiariyanto.github.io/"/>
  <updated>2014-05-22T09:43:14+07:00</updated>
  <id>http://budiariyanto.github.io/</id>
  <author>
    <name><![CDATA[Budi Ariyanto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[KDE Updated To 4.5.4 On -Current]]></title>
    <link href="http://budiariyanto.github.io/blog/2010/12/05/in-slackware-current-changelog-december/"/>
    <updated>2010-12-05T07:10:00+07:00</updated>
    <id>http://budiariyanto.github.io/blog/2010/12/05/in-slackware-current-changelog-december</id>
    <content type="html"><![CDATA[<div class='post'>
In the <a href="http://www.slackware.com/changelog/">slackware -current changelog</a>(December 4 2010) there's some updates for <a href="http://kde.org/">kde</a> packages. This updates also include <a href="http://amarok.kde.org/">amarok</a> and kdevelop newer version. According to the amarok and kde official websites, they planned to release the next stable version at early 2011. <a href="http://www.slackware.com/">Slackware</a> next stable release will be approximately at the same time(I think it's February 2011 since 13.1 release date at May 2010). I wonder if it's release include KDE 4.6 and amarok 2.4. <img class="emoticon" src="http://us.i1.yimg.com/us.yimg.com/i/mesg/emoticons7/105.gif" width="23" alt="daydreaming" title="daydreaming" /></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>sbo</div>
<div class='content'>
cool<a href="http://www.sboasia99.com" rel="nofollow">sbo</a></div>
</div>
<div class='comment'>
<div class='author'>sbo</div>
<div class='content'>
cool<a href="http://www.sboasia99.com" rel="nofollow">sbobet</a></div>
</div>
<div class='comment'>
<div class='author'>ROCK</div>
<div class='content'>
<a href="http://www.7mscore.com" rel="nofollow">livescore</a><br /><a href="http://www.7mscore.com" rel="nofollow">7m.cn</a></div>
</div>
<div class='comment'>
<div class='author'>gclub</div>
<div class='content'>
If you love <a href="http://www.royalgclub-th.com" rel="nofollow">บาคาร่า</a> shopping,Kensington cannot disappoint.No matter what your age group is or what your shopping tastes maybe,Kensington has something always <a href="http://www.royalgclub-th.com" rel="nofollow">บาคาร่าออนไลน์</a> ready for everyone.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install VLC on Slackware 13.1]]></title>
    <link href="http://budiariyanto.github.io/blog/2010/11/23/install-vlc-on-slackware-131/"/>
    <updated>2010-11-23T20:09:00+07:00</updated>
    <id>http://budiariyanto.github.io/blog/2010/11/23/install-vlc-on-slackware-131</id>
    <content type="html"><![CDATA[<div class='post'>
I think VLC is the most powerful video application that available on Linux. Yesterday I had tried to install it on my Slackware 13.1 system, but there's an error while compiling the application due to incompatible part of libpng 1.4.x code. This problem can be solved if we use the patch of libpng 1.4.x.<br />In this article I will show you how I compile and install VLC on my system. Before install the VLC, I have tried to install the dependencies as many as I can get them. Here's the ordered list of the deps : <br /><ol><li>a52dec<br />a52dec is a test program for liba52. It decodes ATSC A/52 streams, and also includes a demultiplexer for mpeg-1 and mpeg-2 program streams. This package also includes liba52. liba52 is a free library for decoding ATSC A/52 streams.</li><li>amrnb<br />This library is an effort to link against the amrnb-codec, standardized by the 3GPP.</li><li>amrwb<br />This is library is an effort to link against the amrwb-codec, standardized by the 3GPP</li><li>libdaemon<br />Libdaemon is a lightweight C library that eases the writing of UNIX daemons.</li><li>avahi (require libdaemon)<br />Avahi is an implementation of the DNS Service Discovery and Multicast DNS specifications for Zeroconf Computing.&nbsp; It uses D-BUS for communication between user applications and a system daemon.&nbsp; The daemon is used to coordinate application efforts in caching replies, necessary to minimize the traffic imposed on networks.</li><li>dirac<br />Dirac is a open and royalty free high quality codec developed by BBC Research.</li><li>enca<br />Enca detects the encoding of text files, on the basis of knowledge of their language. It can also convert them to other encodings, allowing you to recode files without knowing their current encoding. It supports most of Central and East European languages, and a few Unicode variants, independently on language.</li><li>mp4v2<br />This library provides functions to read, create, and modify mp4 files.&nbsp; This is a standalone version of mp4v2 library.</li><li>faac (strongly recommend mp4v2)<br />FAAC is an Advanced Audio Coder (MPEG2-AAC, MPEG4-AAC). The goal of FAAC is to explore the possibilities of AAC and exceed the quality of the currently best MP3 encoders.</li><li>faad2<br />Faad2 is the fastest ISO AAC audio decoder available. Faad2 correctly decodes all MPEG-4 and MPEG-2 MAIN, LC (Low Complexity), HE (High Efficiency), LTP (Long Term Prediction), LD (Low Delay), and ER (Error Resiliency) object type AAC files. Faad2 includes code for SBR (HE AAC) decoding.</li><li>lame<br />LAME is an educational tool to be used for learning about MP3 encoding. The goal of the LAME project is to use the open source model to improvethe psycho acoustics, noise shaping, and speed of MP3.</li><li>twolame (backend only)<br />TwoLAME is an optimized MPEG Audio Layer 2 (MP2) encoder. TwoLAME should be able to be used as a drop-in replacement for LAME (a MPEG Layer 3 encoder). If you want to install the frontend, you will need the libsndfile.</li><li>libass <br />libass is a portable subtitle renderer for the ASS/SSA (Advanced Substation Alpha/Substation Alpha) subtitle format. It is mostly compatible with VSFilter. Since I installed enca before, I pass the --enable-enca while running the configure script.</li><li>libdc1394<br />libdc1394 is a library that provides a complete high level application programming interface (API) for developers who wish to control IEEE 1394 based cameras that conform to the 1394-based Digital Camera Specifications(also known as the IIDC or DCAM Specifications).</li><li>libdvbpsi<br />libdvbpsi is a simple library designed for decoding and generation of MPEG TS and DVB PSI tables.</li><li>libdvdcss<br />libdvdcss is a cross-platform library for transparent DVD device access with on-the-fly CSS decryption.</li><li>libdvdnav<br />libdvdnav is a library that allows easy use of sophisticated DVD navigation features such as DVD menus, multiangle playback, and even interactive DVD games.</li><li>libdvdread<br />libdvdread provides a simple foundation for reading DVD video disks.&nbsp; It provides the functionality that is required to access many DVDs.&nbsp; It parses IFO files, reads NAV-blocks, and performs CSS authentication and descrambling.</li><li>libmpeg2<br />libmpeg2 is a free library for decoding mpeg-2 and mpeg-1 video streams.</li><li>libv4l<br />libv4l is a collection of libraries which adds a thin abstraction layer on top of video4linux2 devices.</li><li>live555<br />This code forms a set of C++ libraries for multimedia streaming, using open standard protocols (RTP/RTCP, RTSP, SIP).</li><li>lua<br />Lua is a free software light-weight programming language designed for extending applications.</li><li>openjpeg<br />The OpenJPEG library is an open-source JPEG 2000 codec.</li><li>orc<br />Orc is a library and set of tools for compiling and executing very simple programs that operate on arrays of data. The language is a generic assembly language that represents many of the features available in SIMD architectures, including saturated addition and subtraction, and many arithmetic operations.</li><li>schroedinger<br />Schrodinger is a high-speed implementation in C of the Dirac codec. It requires orc for version 1.0.9 or higher.</li><li>speex<br />Speex is an Open Source/Free Software patent-free audio compression<br />format designed for speech.</li><li>yasm<br />Yasm is a complete rewrite of the NASM assembler under the "new"<br />BSD License.</li><li>libvpx (requires yasm)<br />Libvpx is the successor of the VP3 codec, on which the Theora codec was based.</li><li>x264<br />x264 is a free library for encoding H264/AVC video streams.</li><li>Xvidcore<br />Xvid is an ISO MPEG-4 compliant video codec. Xvid claims to be the best currently available MPEG-4 video codec solution.</li><li>opencore-amr<br />OpenCORE Adaptive Multi Rate (AMR) speech codec library implementation. This library contains an implementation of the 3GPP TS 26.073 specification for the Adaptive Multi Rate (AMR) speech codec and an implementation for the 3GPP TS 26.173 specification for the Adaptive Multi-Rate - Wideband (AMR-WB) speech decoder.</li><li> graphviz<br />Graphviz is open source graph visualization software.&nbsp; It has several main graph layout programs.&nbsp; It also has web and interactive graphical interfaces, and auxiliary tools, libraries, and language bindings.</li><li>libebml<br />libebml is a C++ libary to parse EBML files. EBML (Extensible Binary <br />Meta-Language library) is a simple XML like binary language for describing data in structured style.</li><li>libmatroska (requires libebml)<br />libmatroska is a C++ libary to parse Matroska files (.mkv and .mka).</li><li>rtmpdump<br />rtmpdump is a toolkit for RTMP streams. All forms of RTMP are supported, including rtmp://, rtmpt://, rtmpe://, rtmpte://, and rtmps://.</li><li>gsm<br />gsm contains command line utilities and libgsm, an implementation of the European GSM 06.10 provisional standard for full-rate speech transcoding, prI-ETS 300 036, which uses RPE/LTP (residual pulse excitation/long term prediction) coding at 13 kbit/s.</li><li>ffmpeg<br />FFmpeg is a complete solution to record, convert and stream audio and video. It includes libavcodec, the leading audio/video codec library. I'm&nbsp; enabling the following libraries to the configure script, since I have install it before : DC1394, DIRAC, FAAC, FAAD, GSM, JP2, LAME, OPENCORE, RTMP, SCHROEDINGER, SPEEX, VPX, X264, XVID.</li><li>libdv<br />The Quasar DV codec (libdv) is a software codec for DV video. DV is the encoding format used by most digital camcorders, typically those that support the IEEE 1394 (aka FireWire or i.Link) interface.</li><li>libshout (requires speex)<br />Libshout is a library for communicating with and sending data to an icecast server.&nbsp; It handles the socket connection, the timing of the data, and prevents bad data from getting to the icecast server.</li><li>libavc<br />libavc1394 is a programming interface for the 1394 Trade Association AV/C (Audio/Video Control) Digital Interface Command Set.</li><li>opencv<br />OpenCV is a library of programming functions mainly aimed at real time computer vision.</li></ol>That's all the dependencies that installed on my system before installing VLC. All this deps can be downloaded at <a href="http://slackbuilds.org/">slackbuild repository</a>. Now, let's install VLC. I use VLC 1.0.6. Before install the VLC, we need libpng 1.4.x patch. You can copy the patch code below to your favorite text editor, and save it with the following name :  <style type="text/css">p, li { white-space: pre-wra </style><b>libpng-1.4.patch</b>.<br /><br /><pre class="prettyprint">diff --git a/modules/codec/png.c b/modules/codec/png.c<br />index 5dd4c2e..acd5694 100644<br />--- a/modules/codec/png.c<br />+++ b/modules/codec/png.c<br />@@ -152,7 +152,7 @@ static picture_t *DecodeBlock( decoder_t *p_dec, block_t **pp_block )<br />     p_info = png_create_info_struct( p_png );<br />     if( p_info == NULL )<br />     {<br />-        png_destroy_read_struct( &amp;p_png, png_infopp_NULL, png_infopp_NULL );<br />+        png_destroy_read_struct( &amp;p_png, NULL, NULL );<br />         block_Release( p_block ); *pp_block = NULL;<br />         return NULL;<br />     }<br />@@ -160,7 +160,7 @@ static picture_t *DecodeBlock( decoder_t *p_dec, block_t **pp_block )<br />     p_end_info = png_create_info_struct( p_png );<br />     if( p_end_info == NULL )<br />     {<br />-        png_destroy_read_struct( &amp;p_png, &amp;p_info, png_infopp_NULL );<br />+        png_destroy_read_struct( &amp;p_png, &amp;p_info, NULL );<br />         block_Release( p_block ); *pp_block = NULL;<br />         return NULL;<br />     }<br /></pre><br />After that, you can install the VLC using my slackbuild script :<br /><br /><pre class="prettyprint">#!/bin/sh<br /><br /># Slackware build script for VLC<br /><br /># Written by Budi Ariyanto (fx.budi.ariyanto@gmail.com)<br /># All rights reserved.<br />#<br /># Redistribution and use of this script, with or without modification, is<br /># permitted provided that the following conditions are met:<br />#<br /># 1. Redistributions of this script must retain the above copyright<br />#    notice, this list of conditions and the following disclaimer.<br />#<br /># THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED<br /># WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF<br /># MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO<br /># EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,<br /># SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,<br /># PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;<br /># OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,<br /># WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR<br /># OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF<br /># ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<br /><br />PRGNAM=vlc   <br />VERSION=${VERSION:-1.0.6} <br />BUILD=${BUILD:-1}<br />TAG=${TAG:-_SBo}  <br /><br /># Automatically determine the architecture we're building on:<br />if [ -z "$ARCH" ]; then<br />  case "$( uname -m )" in<br />    i?86) ARCH=i486 ;;<br />    arm*) ARCH=arm ;;<br />    # Unless $ARCH is already set, use uname -m for all other archs:<br />       *) ARCH=$( uname -m ) ;;<br />  esac<br />fi<br /><br />CWD=$(pwd)<br />TMP=${TMP:-/tmp/SBo} <br />PKG=$TMP/package-$PRGNAM<br />OUTPUT=${OUTPUT:-/tmp}<br /><br />if [ "$ARCH" = "i486" ]; then<br />  SLKCFLAGS="-O2 -march=i486 -mtune=i686"<br />  LIBDIRSUFFIX=""<br />elif [ "$ARCH" = "i686" ]; then<br />  SLKCFLAGS="-O2 -march=i686 -mtune=i686"<br />  LIBDIRSUFFIX=""<br />elif [ "$ARCH" = "x86_64" ]; then<br />  SLKCFLAGS="-O2 -fPIC"<br />  LIBDIRSUFFIX="64"<br />else<br />  SLKCFLAGS="-O2"<br />  LIBDIRSUFFIX=""<br />fi<br /><br />set -e # Exit on most errors<br /><br />rm -rf $PKG<br />mkdir -p $TMP $PKG $OUTPUT<br />cd $TMP<br />rm -rf $PRGNAM-$VERSION<br />tar xvf $CWD/$PRGNAM-$VERSION.tar.bz2<br />cd $PRGNAM-$VERSION<br />chown -R root:root .<br />find . \<br /> \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \<br /> -exec chmod 755 {} \; -o \<br /> \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \<br /> -exec chmod 644 {} \;<br /><br /># patch for compatibility with libpng-1.4<br />patch -p1 &lt; $CWD/libpng-1.4.patch<br /><br />CFLAGS="$SLKCFLAGS" \<br />CXXFLAGS="$SLKCFLAGS" \<br />./configure \<br />  --prefix=/usr \<br />  --libdir=/usr/lib${LIBDIRSUFFIX} \<br />  --sysconfdir=/etc \<br />  --localstatedir=/var \<br />  --mandir=/usr/man \<br />  --docdir=/usr/doc/$PRGNAM-$VERSION \<br />  --build=$ARCH-slackware-linux \<br />  --enable-run-as-root \<br />  --enable-release \<br />  --enable-switcher \<br />  --enable-shout \<br />  --enable-dv \<br />  --enable-dvdread \<br />  --enable-v4l \<br />  --enable-vcdx \<br />  --enable-faad \<br />  --enable-twolame \<br />  --enable-real \<br />  --enable-realrtsp \<br />  --enable-flac \<br />  --enable-tremor \<br />  --enable-theora \<br />  --enable-dirac \<br />  --enable-csri \<br />  --enable-libass \<br />  --enable-asademux \<br />  --enable-xvmc \<br />  --enable-svg \<br />  --enable-snapshot \<br />  --enable-mga \<br />  --enable-omapfb \<br />  --enable-svgalib \<br />  --enable-aa \<br />  --enable-caca \<br />  --enable-lirc \<br />  --enable-mkv \<br />  --enable-xosd \<br />  --enable-fbosd \<br />  --enable-opencv<br /><br /># Compile the application and install it into the $PKG directory<br />make<br />make install DESTDIR=$PKG<br /><br />find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF \<br />  | cut -f 1 -d : | xargs strip --strip-unneeded 2&gt; /dev/null || true<br /><br />mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION<br />cp -a \<br />  doc/*.txt \<br />  $PKG/usr/doc/$PRGNAM-$VERSION<br />cat $CWD/$PRGNAM.SlackBuild &gt; $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild<br /><br />mkdir -p $PKG/install<br />cat $CWD/slack-desc &gt; $PKG/install/slack-desc<br /><br />cd $PKG<br />/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}<br /></pre><br />You also can copy the slackbuild script, and paste it to your editor. Save it with the following name : <b>vlc.Slackbuild</b>. Make sure the libpng patch, slackbuild script and the vlc source are together in a directory. After that, execute the slackbuild script, wait for the process, install it and enjoy VLC! :)</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Budi</div>
<div class='content'>
You can download it at http://download.videolan.org/pub/videolan/vlc/1.0.6/<br /><br />There are later versions you can download.<br /><br />If you are not using version 1.0.6(earlier version not recommended), don&#39;t forget to edit the VERSION at line 26 in my slackbuild script to your respective version of VLC.<br /><br />:)</div>
</div>
<div class='comment'>
<div class='author'>Nachzeher</div>
<div class='content'>
Hmm but, Where Can I download the VLC sources for your slackbuild?<br /><br />Great Post!..<br />I will make it!<br /><br /><br />Thank&#39;s A lot!</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix The Crashed Internal Eclipse Browser]]></title>
    <link href="http://budiariyanto.github.io/blog/2010/10/18/fix-crashed-internal-eclipse-browser/"/>
    <updated>2010-10-18T17:56:00+07:00</updated>
    <id>http://budiariyanto.github.io/blog/2010/10/18/fix-crashed-internal-eclipse-browser</id>
    <content type="html"><![CDATA[<div class='post'>
<div style="font-family: inherit;">If you experienced an Eclipse IDE crashed at startup with the libxpcom or libxul problem, you may fix this in this easiest way : </div><div style="font-family: inherit;">Edit <b>eclipse.ini</b> in the Eclipse directory and add the line:&nbsp;</div><div style="font-family: inherit;">-Dorg.eclipse.swt.browser.XULRunnerPath=<i>path_to_the_seamonkey_library</i> below the '-vmargs' line.&nbsp;</div><pre style="font-family: inherit;">&nbsp;</pre><pre style="font-family: inherit;">Re-run the Eclipse IDE. This should fix the problem.</pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayStation Emulator on Slackware]]></title>
    <link href="http://budiariyanto.github.io/blog/2010/09/18/playstation-emulator-on-slackware/"/>
    <updated>2010-09-18T17:32:00+07:00</updated>
    <id>http://budiariyanto.github.io/blog/2010/09/18/playstation-emulator-on-slackware</id>
    <content type="html"><![CDATA[<div class='post'>
Hi, I found an interesting information for you who want to play PlayStation games with emulator on Slackware. You can use pcsx-reloaded(pcsxr). It's based on pcsx-df project with many improvements. All you need is <a href="http://www.emuasylum.com/emuextra/Playstation%20Bios%20Files.zip">download the PlayStation BIOS</a>, although there is an internal pcsx's BIOS. FYI, I think the best BIOS file to use is SCPH1001.bin. You can <a href="http://slackbuilds.org/repository/13.1/games/pcsxr/">download pcsxr at slackbuilds</a> and PlayStation games in ISO format at <a href="http://www.emuparadise.org/">emuparadise</a>.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing wxCam 1.0.6 on Slackware 13.1]]></title>
    <link href="http://budiariyanto.github.io/blog/2010/05/31/installing-wxcam-106-on-slackware-131/"/>
    <updated>2010-05-31T15:40:00+07:00</updated>
    <id>http://budiariyanto.github.io/blog/2010/05/31/installing-wxcam-106-on-slackware-131</id>
    <content type="html"><![CDATA[<div class='post'>
In the slackbuilds repository, there is wxCam package, but still in version 1.0.4. Now the wxCam has reached version 1.0.6. In order to install it, we need xvidcore, mjpegtools, CImg and wxGTK. All of them can be downloaded at slackbuild's site and installed without problem, except for CImg. At the slackbuild's site, the CImg library source still in version 1.2.9<strike>(31 )</strike>, but we need CImg-1.3.4 due to wxCam compile error. To make the package, you can use my Slackbuild script. I modify it a little from the original script and you can copy it to text editor and save as <span style="font-size: small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">[package_name].SlackBuild.</span></span><br /><blockquote><span style="font-size: small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">#!/bin/sh</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">PRGNAM=CImg</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">VERSION=1.3.4 </span></span><span style="font-size: small;">#<span style="font-family: &quot;Courier New&quot;,Courier,monospace;">change the version to <strike>1.0.6</strike></span></span><span style="font-size: small;"> <span style="font-family: &quot;Courier New&quot;,Courier,monospace;">1.3.4</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">ARCH=noarch</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">BUILD=${BUILD:-1}</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">TAG=${TAG:-_bud}</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">CWD=$(pwd)</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">TMP=${TMP:-/tmp/SBo}</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">PKG=$TMP/package-$PRGNAM</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">OUTPUT=${OUTPUT:-/tmp}</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">set -e</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">rm -rf $PKG</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">mkdir -p $TMP $PKG $OUTPUT</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">cd $TMP</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">rm -rf $PRGNAM-$VERSION</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">unzip $CWD/$PRGNAM-$VERSION.zip #change the command to unzip because the package is in zip format.</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">cd $PRGNAM-$VERSION</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">chown -R root:root .</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">chmod -R a-s,u+w,go+r-w .</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">mkdir -p $PKG/usr/include/CImg</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">cat CImg.h &gt; $PKG/usr/include/CImg/CImg.h</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">( cd $PKG/usr/include/ ; ln -sf /usr/include/CImg/CImg.h . )</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">mkdir -p $PKG/usr/share/CImg</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">cp -a plugins/ $PKG/usr/share/CImg</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION/html</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">cp -ar CHANGES.txt Licence* README.txt examples \</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">&nbsp; $PKG/usr/doc/$PRGNAM-$VERSION/</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">cp -ar html/* $PKG/usr/doc/$PRGNAM-$VERSION/html #change the directory to html</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">cat $CWD/$PRGNAM.SlackBuild &gt; $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">mkdir -p $PKG/install</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">cat $CWD/slack-desc &gt; $PKG/install/slack-desc</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">cd $PKG</span><br style="font-family: &quot;Courier New&quot;,Courier,monospace;" /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}</span></span></blockquote><br />I assumed that you have install this library the other deps package(xvidcore, mjpegtools and wxGTK). Now, let's make the tgz wxCam 1.0.6 package with my script that I modifiy from the original one. You can copy and save the script here also as <span style="font-size: small;"><span style="font-family: &quot;Courier New&quot;,Courier,monospace;"><script_name>[package_name].SlackBuild</script_name></span></span> :<br /><br /><blockquote style="font-family: &quot;Courier New&quot;,Courier,monospace;"><span style="font-size: small;"><br />#!/bin/sh<br />PRGNAM=wxcam<br />VERSION=1.0.6 #change the version to 1.0.6<br />ARCH=${ARCH:-i486}<br />BUILD=${BUILD:-1}<br />TAG=${TAG:-_bud}<br /><br />CWD=$(pwd)<br />TMP=${TMP:-/tmp/SBo}<br />PKG=$TMP/package-$PRGNAM<br />OUTPUT=${OUTPUT:-/tmp}<br /><br />if [ "$ARCH" = "i486" ]; then<br />&nbsp;&nbsp; SLKCFLAGS="-O2 -march=i486 -mtune=i686"<br />&nbsp;&nbsp; LIBDIRSUFFIX=""<br />elif [ "$ARCH" = "i686" ]; then<br />&nbsp;&nbsp; SLKCFLAGS="-O2 -march=i686 -mtune=i686"<br />&nbsp;&nbsp; LIBDIRSUFFIX=""<br />elif [ "$ARCH" = "x86_64" ]; then<br />&nbsp;&nbsp; SLKCFLAGS="-O2 -fPIC"<br />&nbsp;&nbsp; LIBDIRSUFFIX="64"<br />fi<br /><br />set -e<br /><br />rm -rf $PKG<br />mkdir -p $TMP $PKG $OUTPUT<br />cd $TMP<br />rm -rf $PRGNAM-$VERSION<br />tar xvf $CWD/$PRGNAM-$VERSION.tar.bz2<br />cd $PRGNAM-$VERSION<br />chown -R root:root .<br />chmod -R a-s,u+w,go+r-w .<br /><br />CFLAGS="$SLKCFLAGS" \<br />CXXFLAGS="$SLKCFLAGS" \<br />./configure \<br />&nbsp; --prefix=/usr \<br />&nbsp; --libdir=/usr/lib${LIBDIRSUFFIX} \<br />&nbsp; --sysconfdir=/etc \<br />&nbsp; --docdir=/usr/doc/$PRGNAM-$VERSION \<br />&nbsp; --disable-static \<br />&nbsp; --build=$ARCH-slackware-linux<br /><br />make wxcamdocdir=/usr/doc/$PRGNAM-$VERSION<br />make install wxcamdocdir=/usr/doc/$PRGNAM-$VERSION DESTDIR=$PKG <br /><br />find $PKG | xargs file | grep -e "executable" -e "shared object" | grep ELF \<br />&nbsp; | cut -f 1 -d : | xargs strip --strip-unneeded 2&gt; /dev/null || true<br /><br />mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION<br />cp -a COPYING INSTALL $PKG/usr/doc/$PRGNAM-$VERSION<br />cat $CWD/$PRGNAM.SlackBuild &gt; $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild<br />cat $CWD/README &gt; $PKG/usr/doc/$PRGNAM-$VERSION/README$TAG<br /><br />mkdir -p $PKG/install<br />cat $CWD/slack-desc &gt; $PKG/install/slack-desc<br />cat $CWD/doinst.sh &gt; $PKG/install/doinst.sh<br /><br />cd $PKG<br />/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-tgz}</span><br /><br /></blockquote>&nbsp;After the package creation finished, install it and voila!! Now wxCam 1.0.6 is ready to use without any problem. Enjoy! :D</div>

]]></content>
  </entry>
  
</feed>
