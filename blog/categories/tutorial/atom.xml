<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorial | My Personal Blog]]></title>
  <link href="http://budiariyanto.github.io/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://budiariyanto.github.io/"/>
  <updated>2014-06-16T18:27:22+07:00</updated>
  <id>http://budiariyanto.github.io/</id>
  <author>
    <name><![CDATA[Budi Ariyanto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integritas Data Pada MySQL]]></title>
    <link href="http://budiariyanto.github.io/blog/2008/11/06/integritas-data-pada-mysql/"/>
    <updated>2008-11-06T23:10:00+07:00</updated>
    <id>http://budiariyanto.github.io/blog/2008/11/06/integritas-data-pada-mysql</id>
    <content type="html"><![CDATA[<div class='post'>
Beberapa teman saya kebingungan saat mereka berlatih programming yang melibatkan MySQL sebagai databasenya. Mereka bertanya-tanya : "MySQL kok nggak bisa ndetect referensial integrity y??Padahal primary key dan foreign key nya udah di set..". Begitu kira-kira seputar kebingungan mereka... Nah bagi Anda yang mengalami masalah yang sama dengan teman-teman saya, Anda bisa mengikuti panduan yang saya buat di bawah ini :<br/><ol><br/>   <li>Cek dulu apakah MySQL sudah terkonfigurasi untuk support InnoDB storage engine. Biasanya secara default sudah enabled. Tapi jika belum, maka yang harus Anda lakukan adalah mencari file my.ini jika Anda menggunakan Windows, atau my.cnf jika Anda menggunakan linux. my.ini / my.cnf biasanya terletak di sekitar folder tempat MySQL terinstall. Pada kasus ini saya tidak bisa memastikan letaknya di mana karena kemungkinan Anda akan menggunakan webserver yang berbeda-beda, misal Apache2Triad, XAMPP atau WAMP.</li><br/>    <li>Jika sudah ketemu, buka file tersebut, dan cari baris dengan statement : <code>skip-innodb</code>. Jika MySQL Anda sudah dikonfigurasi untuk support InnoDB, maka Anda bisa melihat tanda "#" di depan <code>skip-innodb</code>. Maka dari itu, untuk mengkonfigurasi MySQL supaya support InnoDB, berilah tanda "#" di depan <code>skip-innodb</code>. Jika sudah, save my.ini / my.cnf lalu restart MySQL.</li><br/>  <li>Untuk memastikan apakah InnoDB sudah bekerja, masukkanlah kode berikut ke dalam MySQL: [sourcecode language="sql"]CREATE TABLE customer (customer_id INT, name VARCHAR(30), PRIMARY KEY (customer_id)) ENGINE = INNODB ;[/sourcecode]<br/><br/>Kode di atas untuk membuat table parent. Sekarang buatlah table child dengan mengetikkan kode di bawah ini :<br/><br/>[sourcecode language="sql"]<br/>CREATE TABLE customer_sales ( transaction_id INT,amount INT,customer_id INT NOT NULL, PRIMARY KEY(transaction_id), INDEX(customer_id), FOREIGN KEY(customer_id) REFERENCES customer(customer_id)) ENGINE = INNODB;<br/>[/sourcecode]</li><br/> <li> Jika sudah cobalah insert data langsung pada tabel anak. Seharusnya akan gagal karena pada tabel parent belum terisi apa-apa. [sourcecode language="sql"]INSERT INTO customer_sales VALUES(1,23,1),(3,81,2);[/sourcecode]</li><br/>    <li>Jika Anda mengalami kegagalan dalam memasukkan data karena menjalankan perintah yang ada pada nomor 4, berarti InnoDB telah benar-benar bekerja pada MySQL. Dan jangan khawatir, integritas data juga akan terjaga pada proses update dan delete. :D</li><br/></ol></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BACKUP(DUMPING) DAN RESTORE DATABASE MySQL]]></title>
    <link href="http://budiariyanto.github.io/blog/2008/06/11/backupdumping-dan-restore-database/"/>
    <updated>2008-06-11T23:56:00+07:00</updated>
    <id>http://budiariyanto.github.io/blog/2008/06/11/backupdumping-dan-restore-database</id>
    <content type="html"><![CDATA[<div class='post'>
Setiap database penting untuk di-backup agar tidak terjadi bencana ketika sewaktu-waktu database yang Anda punya rusak, karena mati listrik mungkin... Atau mungkin suatu saat Anda ingin memindahkan database Anda ke komputer lain.. Who knows...? Ini saya ada tutorial untuk dumping dan restore database MySQL.<br /><br /><b>DUMPING:</b><br /><br />Pertama, Anda harus tahu dulu username dan password yang dapat mengakses database yang akan di-backup(sebaiknya user yang mempunyai hak akses penuh terhadap database). Misalnya usernamenya budi, passwordnya budiganteng dan nama databasenya db_budi. Setelah itu ketikkan pada command prompt :<br /><br />[sourcecode language='sql']mysqldump -u budi -p budiganteng db_budi &gt; C:\backup\db_budi_backup.sql[/sourcecode]<br /><br />Hasil file backup berupa file berekstensi .sql, dan dalam kasus ini nantinya file yang tercipta adalah db_budi_backup.sql yang terletak di C:\backup.<br /><br /><b>RESTORE:</b><br /><br />Pertama, Anda buat dulu database di komputer lainnya(sebut saja komputer B) dengan nama database yang sama dengan database di komputer sebelumnya, dalam kasus ini, nama databasenya adalah db_budi dengan mengetikkan perintah create database db_budi. Di samping itu, di komputer B harus ada username budi dengan password budiganteng dengan level hak akses yang sama terhadap database di komputer sebelumnya, dalam kasus ini anggap saja admin. Jika belum ada, ketikkan perintah ini :<br /><br />[sourcecode language='sql']grant all on db_budi.* to 'budi'@'localhost' identified by 'budiganteng'[/sourcecode]<br /><br />Setelah user dibuat, pada command prompt  ketikkan perintah :<br /><br />[sourcecode language='sql']mysql -u budi -p budiganteng db_budi &lt; C:\backup\db_budi_backup.sql[/sourcecode]<br /><br />Setelah perintah ini dijalankan, maka Anda sudah me-restore database MySQL yang diinginkan.</div>

]]></content>
  </entry>
  
</feed>
